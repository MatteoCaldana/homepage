{"version":3,"file":"static/js/67.1383e3eb.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/WaText/components/DataGrids.jsx","App/pages/Projects/projects/WaText/components/MostUsedWords.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  GridToolbarContainer,\r\n  GridToolbarExport,\r\n  GridToolbarColumnsButton,\r\n  GridToolbarFilterButton,\r\n  GridToolbarDensitySelector,\r\n} from '@mui/x-data-grid';\r\n\r\nconst CustomToolbar = () => {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridToolbarColumnsButton color=\"info\" />\r\n      <GridToolbarFilterButton style={{ color: '#2196f3' }} />\r\n      <GridToolbarDensitySelector color=\"info\" />\r\n      <GridToolbarExport color=\"info\" />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nexport { CustomToolbar };","import React, { useState } from \"react\";\r\n\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Grid, IconButton, ToggleButton, Tooltip } from \"@mui/material\";\r\nimport HelpIcon from '@mui/icons-material/Help';\r\n\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nimport { CustomToolbar } from \"./DataGrids\";\r\n\r\nconst WORDS_IN_TABLE_PER_SENDER = 20;\r\nconst WORDS_IN_TABLE_TOTAL = 100;\r\n\r\nconst textDfToWordCount = (textDf) => {\r\n  let wordCount = { '': {} };\r\n  let totalCharacters = { '': 0 };\r\n  textDf.forEach(message => {\r\n    const sender = message.sender;\r\n    if (message.type === \"plainText\" && sender !== \"\") {\r\n      if (!(sender in wordCount)) {\r\n        totalCharacters[sender] = 0;\r\n        wordCount[sender] = {};\r\n      }\r\n      const words = message.message\r\n        .split(/\\W/)\r\n        .map(w => w.toLowerCase())\r\n        .filter(w => w !== '');\r\n      words.forEach(w => wordCount[sender][w] = (wordCount[sender][w] || 0) + 1);\r\n      words.forEach(w => wordCount[''][w] = (wordCount[''][w] || 0) + 1);\r\n\r\n      totalCharacters[sender] += message.message.length;\r\n      totalCharacters[''] += message.message.length;\r\n    }\r\n  });\r\n  return { wordCount, totalCharacters };\r\n}\r\n\r\nconst buildCols = (wordCount) => {\r\n  const cols = Object.keys(wordCount).map(x => ({\r\n    field: x,\r\n    headerName: x === '' ? 'Total' : x,\r\n    width: 100\r\n  }));\r\n  return [{ field: 'word', headerName: 'Word', width: 100 }, ...cols];\r\n}\r\n\r\nconst buildWordCountArray = (wordCount) => {\r\n  let wordCountArray = {};\r\n  for (let [key, value] of Object.entries(wordCount)) {\r\n    wordCountArray[key] = [];\r\n    for (let [word, count] of Object.entries(value))\r\n      wordCountArray[key].push([word, count]);\r\n  }\r\n  return wordCountArray;\r\n}\r\n\r\nconst buildWordsInTable = (wordCountArray) => {\r\n  let wordsInTable = {};\r\n  for (let [key, value] of Object.entries(wordCountArray)) {\r\n    value.sort((a, b) => b[1] - a[1]);\r\n    wordsInTable[key] = value.slice(0, WORDS_IN_TABLE_PER_SENDER).map(x => x[0]);\r\n  }\r\n  return wordsInTable;\r\n}\r\n\r\nconst doFilterMostCommon = (wordsInTable, wordCountArray) => {\r\n  // if at least 80% of senders has that word in its top half then it is  \r\n  // considered a common word and thus removed\r\n  // or we filter it even if it is a one or two letter word\r\n  const commonWord = () => {\r\n    const nSenders = Math.max(2, Math.trunc(Object.keys(wordsInTable).length*0.8));\r\n    const commonWords = Object.keys(wordsInTable)\r\n      .flatMap(sender => wordsInTable[sender].slice(0, Math.trunc(WORDS_IN_TABLE_PER_SENDER / 2)));\r\n    let count = {};\r\n    commonWords.forEach(val => count[val] = (count[val] || 0) + 1);\r\n    for (let [word, c] of Object.entries(count)) {\r\n      if (c >= nSenders || word.length <= 2) {\r\n        return word;\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n  let w = commonWord(wordsInTable);\r\n  let i = 0;\r\n  while (w) {\r\n    for (let [key, value] of Object.entries(wordCountArray)) {\r\n      wordsInTable[key].splice(wordsInTable[key].indexOf(w), 1);             // remove common\r\n      if (WORDS_IN_TABLE_PER_SENDER + i < value.length)\r\n        wordsInTable[key].push(value[WORDS_IN_TABLE_PER_SENDER + (i++)][0]); // add new\r\n    }\r\n    w = commonWord(wordsInTable);\r\n  }\r\n  return wordsInTable;\r\n}\r\n\r\nconst wordCountToTable = (wordCount, totalCharacters, filterMostCommon) => {\r\n  const wordCountArray = buildWordCountArray(wordCount);\r\n  const wordsInTablePreliminary = buildWordsInTable(wordCountArray);\r\n  const wordsInTable = filterMostCommon ? doFilterMostCommon(wordsInTablePreliminary, wordCountArray) \r\n                                        : wordsInTablePreliminary;\r\n\r\n  const mergedWordsInTable = [...new Set(Object.keys(wordsInTable).flatMap(k => wordsInTable[k]))];\r\n  let rows = [];\r\n  mergedWordsInTable.forEach(word => {\r\n    let row = { id: word, word };\r\n    Object.keys(wordsInTable).forEach(sender => row[sender] = wordCount[sender][word] ? wordCount[sender][word] : 0);\r\n    Object.keys(wordsInTable).forEach(sender => row[sender] /= totalCharacters[sender] / 5);\r\n    rows.push(row);\r\n  });\r\n\r\n  rows.sort((a, b) => b[''] - a['']);\r\n  rows = rows.slice(0, WORDS_IN_TABLE_TOTAL);\r\n\r\n  return rows;\r\n}\r\n\r\nconst MostUsedWords = ({ textDf }) => {\r\n  const [filterMostCommon, setFilterMostCommon] = useState(false);\r\n  const { wordCount, totalCharacters } = textDfToWordCount(textDf);\r\n  const rows = wordCountToTable(wordCount, totalCharacters, filterMostCommon);\r\n  const cols = buildCols(wordCount);\r\n  return (\r\n    <React.Fragment>\r\n      <Divider style={{ marginTop: 10, marginBottom: 10 }} />\r\n      <Grid container justifyContent=\"space-between\">\r\n        <Grid item>\r\n          <Grid container>\r\n            <Typography variant=\"h6\">\r\n              Most Used Words\r\n            </Typography>\r\n            <Tooltip title={<ul><li>Toggle the button to filter out from the table the most used words and leave the one characterizing each sender</li><li>The numbers in the table represent the relative frequency of the word for that sender</li></ul>}>\r\n              <IconButton size=\"small\">\r\n                <HelpIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <ToggleButton selected={filterMostCommon} size=\"small\"\r\n            value={filterMostCommon}\r\n            onClick={() => setFilterMostCommon(f => !f)}\r\n          >\r\n            Filter Out Most Common\r\n          </ToggleButton>\r\n        </Grid>\r\n      </Grid>\r\n      <DataGrid\r\n        style={{ maxHeight: 500 }}\r\n        rows={rows}\r\n        columns={cols}\r\n        pageSize={rows.length}\r\n        density=\"compact\"\r\n        disableSelectionOnClick\r\n        components={{\r\n          Toolbar: CustomToolbar,\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MostUsedWords;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["CustomToolbar","_jsxs","GridToolbarContainer","children","_jsx","GridToolbarColumnsButton","color","GridToolbarFilterButton","style","GridToolbarDensitySelector","GridToolbarExport","wordCountToTable","wordCount","totalCharacters","filterMostCommon","wordCountArray","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","_i2","_Object$entries2","_Object$entries2$_i","word","count","push","buildWordCountArray","wordsInTablePreliminary","wordsInTable","_i3","_Object$entries3","_Object$entries3$_i","sort","a","b","slice","map","x","buildWordsInTable","commonWord","nSenders","Math","max","trunc","keys","commonWords","flatMap","sender","WORDS_IN_TABLE_PER_SENDER","forEach","val","_i4","_Object$entries4","_Object$entries4$_i","w","i","_i5","_Object$entries5","_Object$entries5$_i","splice","indexOf","doFilterMostCommon","mergedWordsInTable","_toConsumableArray","Set","k","rows","row","id","_ref","textDf","_useState","useState","_useState2","setFilterMostCommon","_textDfToWordCount","message","type","words","split","toLowerCase","filter","textDfToWordCount","cols","field","headerName","width","concat","buildCols","React","Divider","marginTop","marginBottom","Grid","container","justifyContent","item","Typography","variant","Tooltip","title","IconButton","size","HelpIcon","ToggleButton","selected","onClick","f","DataGrid","maxHeight","columns","pageSize","density","disableSelectionOnClick","components","Toolbar","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"sourceRoot":""}