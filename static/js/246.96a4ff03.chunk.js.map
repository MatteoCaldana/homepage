{"version":3,"file":"static/js/246.96a4ff03.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/WaText/components/Followups/TimeGapDistribution.jsx","App/pages/Projects/projects/WaText/components/Followups/WhoStartsConversations.jsx","App/pages/Projects/projects/WaText/components/generic/MultipleSelectCheckmarks.jsx","App/pages/Projects/projects/WaText/components/Followups/FollowUpTable.jsx","App/pages/Projects/projects/WaText/engine/movingAverage.js","App/pages/Projects/projects/WaText/components/Followups/UserEngagementInTime.jsx","App/pages/Projects/projects/WaText/engine/conversations.js","App/pages/Projects/projects/WaText/components/Followups/index.jsx","App/pages/Projects/projects/WaText/components/generic/BasicTabs.jsx","App/pages/Projects/projects/WaText/components/generic/Plot.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Plot from '../generic/Plot';\r\n\r\n//------------------------------------------------------------------------------\r\n// consider two consecutives messages as different if too much time is passed\r\n// or the senders are different\r\nconst getFilteredTimeGaps = (textDf, threshold) => {\r\n  let filtered = [], differentSender = [];;\r\n  let j = 0;\r\n  for (let i = 0; i < textDf.length - 1; ++i) {\r\n    if (textDf[i + 1].timestamp - textDf[j].timestamp > threshold) {\r\n      if (textDf[i + 1].senderId !== textDf[i].senderId) {\r\n        differentSender.push(textDf[i + 1].timestamp - textDf[i].timestamp);\r\n      }\r\n      filtered.push(textDf[i + 1].timestamp - textDf[i].timestamp);\r\n      j = i + 1;\r\n    }\r\n  }\r\n  return { filtered, differentSender };\r\n}\r\n\r\nconst TimeGapDistribution = ({ textDf, threshold }) => {\r\n  const timeGaps = textDf.slice(1).map((x, i) => x.timestamp - textDf[i].timestamp);\r\n  const { filtered, differentSender } = getFilteredTimeGaps(textDf, threshold);\r\n  const transform = x => Math.log10(x);\r\n  const tickvals = [1, 10, 60, 600, 3600, 5 * 3600, 86400, 7 * 86400, 30 * 86400].map(x => x * 1000);\r\n  const ticktext = ['1s', '10s', '1min', '10min', '1h', '5h', '1d', '7d', '30d'];\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Plot\r\n        data={[\r\n          { type: 'histogram', x: timeGaps.map(transform), name: 'Full' },\r\n          { type: 'histogram', x: filtered.map(transform), name: 'Filtered' },\r\n          { type: 'histogram', x: differentSender.map(transform), name: 'Different<br>Sender' },\r\n        ]}\r\n        layout={\r\n          {\r\n            xaxis: {\r\n              tickvals: tickvals.map(transform),\r\n              ticktext: ticktext\r\n            }\r\n          }\r\n        }\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default TimeGapDistribution;","import React from \"react\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport Plot from '../generic/Plot';\r\n\r\nconst plotlyColors = [\r\n  '#1f77b4',  // muted blue\r\n  '#ff7f0e',  // safety orange\r\n  '#2ca02c',  // cooked asparagus green\r\n  '#d62728',  // brick red\r\n  '#9467bd',  // muted purple\r\n  '#8c564b',  // chestnut brown\r\n  '#e377c2',  // raspberry yogurt pink\r\n  '#7f7f7f',  // middle gray\r\n  '#bcbd22',  // curry yellow-green\r\n  '#17becf'   // blue-teal\r\n];\r\n\r\nconst range = (start, end, step = 1) => {\r\n  let res = [];\r\n  for (let i = start; i < end; i += step) res.push(i);\r\n  return res;\r\n}\r\n\r\nconst WhoStartsConversations = ({ conversationDf }) => {\r\n  const theme = useTheme();\r\n\r\n  let rawData = {};\r\n  conversationDf.forEach(conv => {\r\n    if (rawData[conv.senderStart])\r\n      rawData[conv.senderStart].push(conv.timestampStart)\r\n    else\r\n      rawData[conv.senderStart] = [conv.timestampStart]\r\n  });\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Plot\r\n        data={[\r\n          ...Object.keys(rawData).map(sender =>\r\n          ({\r\n            type: 'histogram',\r\n            x: rawData[sender].map(x => new Date(x)),\r\n            name: sender,\r\n            legendgroup: sender,\r\n          })\r\n          ),\r\n          ...Object.keys(rawData).map((sender, idx) =>\r\n          ({\r\n            type: 'scatter',\r\n            x: rawData[sender].map(x => new Date(x)),\r\n            y: range(1, rawData[sender].length + 1),\r\n            name: \"Cumulative\",\r\n            legendgroup: sender,\r\n            line: { color: plotlyColors[idx % plotlyColors.length] },\r\n            opacity: 0.2,\r\n            yaxis: 'y2',\r\n          })\r\n          ),\r\n        ]}\r\n        layout={{\r\n          yaxis2: {\r\n            tickfont: { color: theme.palette.primary.contrastText },\r\n            anchor: 'free',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n            range: [1, Math.max(...Object.keys(rawData).map(k => rawData[k].length))],\r\n            position: .95\r\n          }\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default WhoStartsConversations;","import React from \"react\";\r\n\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Select from '@mui/material/Select';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nconst ITEM_HEIGHT = 40;\r\nconst ITEM_PADDING_TOP = 0;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst MultipleSelectCheckmarks = ({ state, setState, list }) => {\r\n  const handleChange = (event) => {\r\n    const { target: { value }, } = event;\r\n    setState(typeof value === 'string' ? value.split(',') : value,);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ m: 1, width: 300 }}>\r\n        <Select\r\n          multiple\r\n          value={state}\r\n          onChange={handleChange}\r\n          renderValue={(selected) => selected.join(', ')}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {list.map((name) => (\r\n            <MenuItem key={name} value={name}>\r\n              <Checkbox checked={state.indexOf(name) > -1} />\r\n              <ListItemText primary={name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default MultipleSelectCheckmarks;","import React, { useState } from \"react\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport * as d3 from \"d3\";\r\n\r\nimport MultipleSelectCheckmarks from \"../generic/MultipleSelectCheckmarks\";\r\n\r\nconst isNumber = x => x || (!x === 0);\r\n\r\nconst FollowUpTable = ({ table, reverseColors = false }) => {\r\n  const allSenders = Object.keys(table).filter(x => x !== \"\");\r\n  const [senders, setSenders] = useState(allSenders);\r\n\r\n  const vals = senders.flatMap(s => senders.map(a => table[s][a])).filter(isNumber);\r\n  const min = Math.min(...vals), max = Math.max(...vals);\r\n\r\n  const colorMap = d3[`interpolateTurbo`];\r\n  const reverse = x => reverseColors ? 1 - x : x;\r\n  const getBackgroundColor = (x) => {\r\n    if (isNumber(x))\r\n      return colorMap(reverse((x - min) / (max - min)) / 2 + .5);\r\n    return '';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\">\r\n        Choose the users in the table:\r\n        <MultipleSelectCheckmarks list={allSenders} state={senders} setState={setSenders} />\r\n      </Grid>\r\n      <table>\r\n        <thead>\r\n          <tr><th>Sender\\Answerer</th>{senders.map((x, i) => <th key={i}>{x}</th>)}</tr>\r\n        </thead>\r\n        <tbody>\r\n          {senders.map((s, i) =>\r\n            <tr key={i}>\r\n              <td>{s}</td>\r\n              {senders.map((a,j) => <td key={j} style={{ backgroundColor: getBackgroundColor(table[s][a]), color: '#222' }}>\r\n                {`${table[s][a] ? table[s][a] : ''}`.slice(0, 5)}\r\n              </td>)}\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default FollowUpTable;","const sma = (array, window) => {\r\n    let res = [];\r\n    for (let i = 0; i < array.length - window; ++i) {\r\n        res.push(array.slice(i, i + window).reduce((x, y) => x + y) / window);\r\n    }\r\n    return res;\r\n}\r\n\r\nconst range = (start, end, step = 1) => {\r\n    let res = [];\r\n    if (start < end) {\r\n        for (let i = start; i < end; i += step) res.push(i);\r\n    } else {\r\n        for (let i = start; i > end; i += step) res.push(i);\r\n    }\r\n    return res;\r\n}\r\n\r\nconst sum = a => a.reduce((x, y) => x + y, 0);\r\nconst dot = (a, b) => {\r\n    let res = 0;\r\n    for (let i = 0; i < a.length; ++i)\r\n        res += a[i] * b[i];\r\n    return res;\r\n}\r\n\r\n// returns kernel.length - array.length + 1 values\r\nconst convolution = (array, kernel) => {\r\n    const kn = kernel.length;\r\n    const an = array.length;\r\n    const halfk = Math.trunc(kn / 2); \r\n    let res = [];\r\n    for (let i = 0; i < an; ++i) {\r\n        const kwindow = kernel.slice(halfk - i, halfk - i + an);\r\n        res.push(dot(kwindow, array) / sum(kwindow));\r\n    }\r\n    return res;\r\n}\r\n\r\nconst wmaKernel = (n, window) => {\r\n    const kernel = [\r\n        ...Array(n - window).fill(0),\r\n        ...range(1, window),\r\n        ...range(window, 0, -1),\r\n        ...Array(n - window).fill(0)\r\n    ]; // [0..0,1..window..1,0..0]\r\n    return kernel;\r\n}\r\n\r\nconst emaKernel = (n, decay) => {\r\n    const kernel = [\r\n        ...range(n, 0, -1).map(x => decay ** x),\r\n        ...range(0, n + 1).map(x => decay ** x),\r\n    ];\r\n    return kernel;\r\n}\r\n\r\nexport { sma, wmaKernel, emaKernel, convolution };","import React, { useState } from \"react\";\r\n\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nimport Plot from '../generic/Plot';\r\nimport { emaKernel, convolution } from \"../../engine/movingAverage\";\r\nimport MultipleSelectCheckmarks from \"../generic/MultipleSelectCheckmarks\";\r\n\r\nconst plotlyColors = [\r\n  '#1f77b4',  // muted blue\r\n  '#ff7f0e',  // safety orange\r\n  '#2ca02c',  // cooked asparagus green\r\n  '#d62728',  // brick red\r\n  '#9467bd',  // muted purple\r\n  '#8c564b',  // chestnut brown\r\n  '#e377c2',  // raspberry yogurt pink\r\n  '#7f7f7f',  // middle gray\r\n  '#bcbd22',  // curry yellow-green\r\n  '#17becf'   // blue-teal\r\n];\r\n\r\nconst N = 10000;\r\nconst defaultThreshold = 90;\r\n\r\nconst calculateValue = t => t / 100;\r\n\r\nconst CustomSlider = ({ setThresholdCommitted }) => {\r\n  const [state, setState] = useState(defaultThreshold);\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n      Select smoothing: {calculateValue(state)}\r\n      <Slider\r\n        style={{maxWidth: 300}}\r\n        value={state}\r\n        onChange={(_, value) => setState(value)}\r\n        onChangeCommitted={(_, value) => setThresholdCommitted(calculateValue(value))}\r\n        scale={calculateValue}\r\n        min={0}\r\n        max={100}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst UserEngagementInTime = ({ conversationDf, timeSerie, logaxis = false }) => {\r\n  const allSenders = Object.keys(timeSerie).filter(x => x !== \"\");\r\n  const [senders, setSenders] = useState(allSenders.slice(0, 2));\r\n  const [thresholdCommitted, setThresholdCommitted] = useState(calculateValue(defaultThreshold));\r\n  const emaK = emaKernel(N, thresholdCommitted);\r\n\r\n  let time = conversationDf.map(x => new Date(x.timestampStart));\r\n  let table = [];\r\n  senders.forEach(s => Object.keys(timeSerie[s]).forEach(a => {\r\n    if (s !== '' && a !== '') {\r\n      table.push({\r\n        x: timeSerie[s][a].map((x, i) => [x, i]).filter(x => x[0] !== Infinity).map(x => time[x[1]]),\r\n        y: convolution(timeSerie[s][a].filter(x => x !== Infinity), emaK),\r\n        type: 'scatter',\r\n        legendgroup: `${s} Vs ${a}`,\r\n        mode: 'lines',\r\n        name: `Moving Average`,\r\n        visible: 'legendonly',\r\n        line: { width: 7 },\r\n        opacity: 0.4\r\n      });\r\n    }\r\n  }));\r\n  const startLen = table.length;\r\n  senders.forEach(s => Object.keys(timeSerie[s]).forEach(a => {\r\n    if (s !== '' && a !== '') {\r\n      table.push({\r\n        x: time,\r\n        y: timeSerie[s][a],\r\n        type: 'scatter',\r\n        mode: 'markers',\r\n        name: `${s} Vs ${a}`,\r\n        legendgroup: `${s} Vs ${a}`,\r\n        visible: 'legendonly',\r\n        line: { color: plotlyColors[(table.length - startLen) % plotlyColors.length] },\r\n        opacity: 0.7\r\n      });\r\n    }\r\n  }));\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n      Select senders: <MultipleSelectCheckmarks list={allSenders} state={senders} setState={setSenders} />\r\n      <CustomSlider setThresholdCommitted={setThresholdCommitted} />\r\n      <Plot data={table} layout={{\r\n        yaxis: {\r\n          type: logaxis ? 'log' : 'normal',\r\n          autorange: true\r\n        }\r\n      }} />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default UserEngagementInTime;","//------------------------------------------------------------------------------\r\n// The idea is to split the textDf into \"conversations\", a group of coesive \r\n// messages in time i.e. there is never a large enough time gap between them\r\n// Each conversation has its own followup tab so we can mesure the engagement\r\n// among users in time\r\n\r\nconst buildConversationDf = (textDf, threshold) => {\r\n  let conversationDf = [];\r\n  let i = 0, j = 0;\r\n  while (i < textDf.length) {\r\n    const mkMsg = (msg) => ({\r\n      sender: msg.sender,\r\n      senderId: msg.senderId,\r\n      timestamp: msg.timestamp,\r\n      count: 1\r\n    });\r\n    let conversation = [mkMsg(textDf[i])];\r\n    while ((j < textDf.length - 1) &&  // find conversation end\r\n      (textDf[j + 1].timestamp - textDf[j].timestamp <= threshold)) {\r\n      const backIdx = conversation.length - 1;\r\n      if (conversation[backIdx].sender === textDf[j + 1].sender) {   // group same consecutive sender\r\n        conversation[backIdx].count++;\r\n        conversation[backIdx].timestamp = new Date(textDf[j + 1].timestamp.getTime()\r\n          + conversation[backIdx].timestamp.getTime());\r\n      } else {\r\n        conversation.push(mkMsg(textDf[j + 1]));\r\n      }\r\n      j++;\r\n    }\r\n    const convRow = makeConversation(conversation);\r\n    if (convRow)\r\n      conversationDf.push(convRow);\r\n    i = ++j;\r\n  }\r\n  return conversationDf;\r\n}\r\n\r\nconst makeConversation = (conversationMsg) => {\r\n  const conversationMsgFiltered = conversationMsg.filter(x => x.senderId !== -1);\r\n  if (conversationMsgFiltered.length === 0)\r\n    return false;\r\n  let numMsgBySender = {};\r\n  conversationMsgFiltered.forEach(msg =>\r\n    numMsgBySender[msg.sender] = (numMsgBySender[msg.sender] || 0) + 1\r\n  )\r\n  return {\r\n    followup: makeFollowupTable(conversationMsgFiltered),\r\n    timestampStart: conversationMsgFiltered[0].timestamp / conversationMsgFiltered[0].count,\r\n    senderStart: conversationMsgFiltered[0].sender,\r\n    numMsg: conversationMsgFiltered.map(x => x.count).reduce((x, y) => x + y, 0),\r\n    numMsgBySender\r\n  };\r\n}\r\n\r\nconst prepareFollowupTable = (senders) => {\r\n  let table = {};\r\n  senders.forEach(s => {\r\n    let tmp = {};\r\n    senders.forEach(a => { if (a !== s) tmp[a] = [] });\r\n    table[s] = tmp;\r\n  });\r\n  return table;\r\n}\r\n\r\nconst makeFollowupTable = (conversationMsg) => {\r\n  const senders = [...new Set(conversationMsg.map(x => x.sender))];\r\n  let table = prepareFollowupTable(senders);\r\n  const firstAnswer = (idx, answerer) => {\r\n    for (let i = idx + 1; i < conversationMsg.length; ++i) {\r\n      if (conversationMsg[i].sender === answerer)\r\n        return conversationMsg[i].timestamp / conversationMsg[i].count;\r\n    }\r\n    return Infinity;\r\n  }\r\n  conversationMsg.forEach((msg, i) => {\r\n    senders.forEach(answerer => {\r\n      if (answerer !== msg.sender) {\r\n        table[msg.sender][answerer].push(\r\n          (firstAnswer(i, answerer) - msg.timestamp / msg.count) / 1000\r\n        );\r\n      }\r\n    });\r\n  });\r\n  return table;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// given the conversations in time we calculate the mean follow-up times for \r\n// each couple of users and the answer rate\r\n\r\nconst aggregateConversations = (textDf, conversationDf) => {\r\n  const senders = [...new Set(textDf.map(x => x.sender))];\r\n\r\n  let allAnswers = prepareFollowupTable(senders);\r\n  let numMsgSent = {};\r\n  let meanAnswerTimeSerie = prepareFollowupTable(senders);\r\n  let answerRateSerie = prepareFollowupTable(senders);\r\n\r\n  for (let t = 0; t < conversationDf.length; ++t) {\r\n    const row = conversationDf[t];\r\n    for (let i = 0; i < senders.length; ++i) {\r\n      const sender = senders[i];\r\n      numMsgSent[sender] = (numMsgSent[sender] || 0)\r\n        + (row.numMsgBySender[sender] ? row.numMsgBySender[sender] : 0);\r\n      for (let j = 0; j < senders.length; ++j) {\r\n        const answerer = senders[j];\r\n        if (i !== j) {\r\n          if (row.followup[sender] && row.followup[sender][answerer]) {\r\n            const goodAnswers = row.followup[sender][answerer].filter(x => x !== Infinity);\r\n            allAnswers[sender][answerer] = allAnswers[sender][answerer].concat(goodAnswers);\r\n            if (goodAnswers.length > 0)\r\n              meanAnswerTimeSerie[sender][answerer].push(goodAnswers.reduce((x, y) => x + y) / goodAnswers.length);\r\n            else\r\n              meanAnswerTimeSerie[sender][answerer].push(Infinity);\r\n            answerRateSerie[sender][answerer].push(goodAnswers.length / row.numMsgBySender[sender]);\r\n          } else {\r\n            answerRateSerie[sender][answerer].push(0);\r\n            meanAnswerTimeSerie[sender][answerer].push(Infinity);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { meanAnswerTimeSerie, answerRateSerie, allAnswers, numMsgSent }\r\n}\r\n\r\nconst aggregateAllAnswers = (allAnswers, numMsgSent) => {\r\n  const senders = Object.keys(allAnswers);\r\n  let meanAnswerTime = prepareFollowupTable(senders);\r\n  let answerRate = prepareFollowupTable(senders);\r\n\r\n  for (let i = 0; i < senders.length; ++i) {\r\n    const sender = senders[i];\r\n    for (let j = 0; j < senders.length; ++j) {\r\n      const answerer = senders[j];\r\n      if (i !== j) {\r\n        meanAnswerTime[sender][answerer] = allAnswers[sender][answerer].reduce((x, y) => x + y, 0)\r\n          / allAnswers[sender][answerer].length;\r\n        answerRate[sender][answerer] = allAnswers[sender][answerer].length\r\n          / numMsgSent[sender];\r\n      }\r\n    }\r\n  }\r\n\r\n  return { meanAnswerTime, answerRate }\r\n}\r\n\r\nexport { buildConversationDf, aggregateConversations, aggregateAllAnswers }","import React, { useState } from \"react\";\r\n\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Grid, IconButton, Slider, Tooltip } from \"@mui/material\";\r\n\r\nimport HelpIcon from '@mui/icons-material/Help';\r\n\r\nimport BasicTabs from \"../generic/BasicTabs\";\r\nimport TimeGapDistribution from \"./TimeGapDistribution\";\r\nimport WhoStartsConversations from \"./WhoStartsConversations\";\r\nimport FollowUpTable from \"./FollowUpTable\";\r\nimport UserEngagementInTime from \"./UserEngagementInTime\";\r\nimport {\r\n  buildConversationDf,\r\n  aggregateConversations,\r\n  aggregateAllAnswers\r\n} from \"../../engine/conversations\";\r\n\r\nconst labels = [\r\n  \"Time Gap Distribution\",\r\n  \"Who Starts Conversations\",\r\n  \"User Follow-Up Time\",\r\n  \"User Follow-Up Rate\",\r\n  \"Mean Follow-Up Time\",\r\n  \"Mean Follow-Up Rate\",\r\n];\r\n\r\nconst calculateValue = t => 1000 * 5*60 * 1.07 ** t;\r\nconst calculateLabel = t => {\r\n  const r = x => Math.trunc(x / 100) / 10;\r\n  if (t < 1000 * 60) return `${r(t)} s`;\r\n  if (t < 1000 * 60 * 60) return `${r(t / 60)} min`;\r\n  if (t < 1000 * 60 * 60 * 24) return `${r(t / 3600)} h`;\r\n  return `${r(t / 86400)} day`;\r\n}\r\n\r\nconst defaultThreshold = 50;\r\n\r\nconst CustomSlider = ({ setThresholdCommitted }) => {\r\n  const [state, setState] = useState(defaultThreshold);\r\n  return (\r\n    <Grid container>\r\n      Threshold: {calculateLabel(calculateValue(state))}\r\n      <Slider\r\n        value={state}\r\n        onChange={(_, value) => setState(value)}\r\n        onChangeCommitted={(_, value) => setThresholdCommitted(calculateValue(value))}\r\n        valueLabelFormat={calculateLabel}\r\n        scale={calculateValue}\r\n        min={0}\r\n        max={100}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst Followups = ({ textDf }) => {\r\n  const [thresholdCommitted, setThresholdCommitted] = useState(calculateValue(defaultThreshold));\r\n\r\n  const conversationDf = buildConversationDf(textDf, thresholdCommitted);\r\n  const { meanAnswerTimeSerie, answerRateSerie, allAnswers, numMsgSent }\r\n    = aggregateConversations(textDf, conversationDf);\r\n  const { meanAnswerTime, answerRate } = aggregateAllAnswers(allAnswers, numMsgSent);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Divider style={{ marginTop: 10, marginBottom: 10 }} />\r\n      <Grid container>\r\n        <Typography variant=\"h6\">\r\n          Partition Messages into Conversations and Analyze Follow-Up Times\r\n        </Typography>\r\n        <Tooltip title={<ul><li>Toggle the sender by clicking on the legend on the right</li><li>Fine tune the separation parameter manually using the slider</li></ul>}>\r\n          <IconButton size=\"small\">\r\n            <HelpIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Grid>\r\n      <CustomSlider setThresholdCommitted={setThresholdCommitted}/>\r\n      <BasicTabs labels={labels} tabs={[\r\n        { component: () => <TimeGapDistribution textDf={textDf} threshold={thresholdCommitted} /> },\r\n        { component: () => <WhoStartsConversations conversationDf={conversationDf} /> },\r\n        { component: () => <UserEngagementInTime logaxis timeSerie={meanAnswerTimeSerie} conversationDf={conversationDf}/> },\r\n        { component: () => <UserEngagementInTime timeSerie={answerRateSerie} conversationDf={conversationDf}/> },\r\n        { component: () => <FollowUpTable table={meanAnswerTime} /> },\r\n        { component: () => <FollowUpTable reverseColors table={answerRate}/> }\r\n      ]} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Followups;","import React, { useState } from 'react';\r\n\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst TabPanel = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst allyProps = (index) => {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst BasicTabs = ({labels, tabs}) => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n        <Tabs variant=\"scrollable\" scrollButtons allowScrollButtonsMobile \r\n          value={value} onChange={handleChange} textColor=\"inherit\"\r\n        >\r\n          {labels.map((l, i) => <Tab label={l} key={i} {...allyProps(i)} />)}\r\n        </Tabs>\r\n      </Box>\r\n      {tabs.map((t, i) => \r\n        <TabPanel value={value} index={i} key={i}>\r\n          <t.component/>\r\n        </TabPanel>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default BasicTabs;","import React from \"react\";\r\n\r\nimport { useTheme } from \"@mui/system\";\r\n\r\nimport Plot from 'react-plotly.js';\r\n\r\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\r\n/**\r\n * Simple object check.\r\n * @param item\r\n * @returns {boolean}\r\n */\r\n export function isObject(item) {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\n/**\r\n * Deep merge two objects.\r\n * @param target\r\n * @param ...sources\r\n */\r\nexport function mergeDeep(target, ...sources) {\r\n  if (!sources.length) return target;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) Object.assign(target, { [key]: {} });\r\n        mergeDeep(target[key], source[key]);\r\n      } else {\r\n        Object.assign(target, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(target, ...sources);\r\n}\r\n// -----------------------------------------------------------------------------\r\n\r\nconst defaultLayout = (theme) => ({\r\n  width: '100%', height: 500, margin: {\r\n    l: 40,\r\n    r: 20,\r\n    b: 18,\r\n    t: 30,\r\n    pad: 0\r\n  },\r\n  paper_bgcolor: theme.palette.background.paper,\r\n  plot_bgcolor: theme.palette.background.paper,\r\n  xaxis: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n  yaxis: {\r\n    color: theme.palette.text.primary\r\n  },\r\n  legend: {\r\n    font: {\r\n      color: theme.palette.text.primary\r\n    },\r\n  },\r\n  title: {\r\n    font: {\r\n      color: theme.palette.text.primary,\r\n    }\r\n  },\r\n  scene: {\r\n    xaxis: {\r\n      color: theme.palette.text.primary\r\n    },\r\n    yaxis: {\r\n      color: theme.palette.text.primary\r\n    },\r\n    zaxis: {\r\n      color: theme.palette.text.primary\r\n    },\r\n  }\r\n});\r\n\r\nconst CustomPlot = (props) => {\r\n  const theme = useTheme();\r\n  const layout = defaultLayout(theme);\r\n  return (\r\n    <Plot\r\n      data={props.data}\r\n      layout={props.layout ? mergeDeep(props.layout, layout) : layout}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CustomPlot;"],"names":["_ref","textDf","threshold","timeGaps","slice","map","x","i","timestamp","_getFilteredTimeGaps","filtered","differentSender","j","length","senderId","push","getFilteredTimeGaps","transform","Math","log10","tickvals","_jsx","Grid","container","justifyContent","children","Plot","data","type","name","layout","xaxis","ticktext","plotlyColors","range","start","end","step","arguments","undefined","res","conversationDf","theme","useTheme","rawData","forEach","conv","senderStart","timestampStart","concat","_toConsumableArray","Object","keys","sender","Date","legendgroup","idx","y","line","color","opacity","yaxis","yaxis2","tickfont","palette","primary","contrastText","anchor","overlaying","side","max","apply","k","position","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","state","setState","list","FormControl","sx","m","Select","multiple","value","onChange","event","target","split","renderValue","selected","join","_jsxs","MenuItem","Checkbox","checked","indexOf","ListItemText","isNumber","table","_ref$reverseColors","reverseColors","allSenders","filter","_useState","useState","_useState2","_slicedToArray","senders","setSenders","vals","flatMap","s","a","min","colorMap","d3","getBackgroundColor","reverse","_Fragment","alignItems","MultipleSelectCheckmarks","backgroundColor","dot","b","convolution","array","kernel","kn","an","halfk","trunc","kwindow","reduce","calculateValue","t","CustomSlider","setThresholdCommitted","Slider","maxWidth","_","onChangeCommitted","scale","_ref2","n","decay","timeSerie","_ref2$logaxis","logaxis","_useState3","_useState4","_useState5","_useState6","thresholdCommitted","emaK","pow","time","Infinity","mode","visible","startLen","autorange","makeConversation","conversationMsg","conversationMsgFiltered","numMsgBySender","msg","followup","makeFollowupTable","count","numMsg","prepareFollowupTable","tmp","Set","answerer","firstAnswer","labels","calculateLabel","r","valueLabelFormat","mkMsg","conversation","backIdx","getTime","convRow","buildConversationDf","_aggregateConversatio","allAnswers","numMsgSent","meanAnswerTimeSerie","answerRateSerie","row","goodAnswers","aggregateConversations","_aggregateAllAnswers","meanAnswerTime","answerRate","aggregateAllAnswers","React","Divider","marginTop","marginBottom","Typography","variant","Tooltip","title","IconButton","size","HelpIcon","BasicTabs","tabs","component","TimeGapDistribution","WhoStartsConversations","UserEngagementInTime","FollowUpTable","TabPanel","props","index","other","_objectWithoutProperties","_excluded","_objectSpread","role","hidden","id","setValue","Box","borderBottom","borderColor","Tabs","scrollButtons","allowScrollButtonsMobile","newValue","textColor","l","Tab","label","isObject","item","Array","isArray","mergeDeep","_len","sources","_key","source","shift","key","assign","_defineProperty","height","margin","pad","paper_bgcolor","background","paper","plot_bgcolor","text","legend","font","scene","zaxis","defaultLayout"],"sourceRoot":""}