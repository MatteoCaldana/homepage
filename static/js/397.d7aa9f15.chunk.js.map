{"version":3,"file":"static/js/397.d7aa9f15.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/WaText/components/Followups/TimeGapDistribution.jsx","App/pages/Projects/projects/WaText/components/Followups/WhoStartsConversations.jsx","App/pages/Projects/projects/WaText/components/generic/MultipleSelectCheckmarks.jsx","App/pages/Projects/projects/WaText/components/Followups/FollowUpTable.jsx","App/pages/Projects/projects/WaText/components/Followups/UserEngagementInTime.jsx","App/pages/Projects/projects/WaText/engine/conversations.js","App/pages/Projects/projects/WaText/components/Followups/index.jsx","App/pages/Projects/projects/WaText/components/generic/BasicTabs.jsx","App/pages/Projects/projects/WaText/components/generic/Plot.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Plot from '../generic/Plot';\r\n\r\n//------------------------------------------------------------------------------\r\n// consider two consecutives messages as different if too much time is passed\r\n// or the senders are different\r\nconst getFilteredTimeGaps = (textDf, threshold) => {\r\n  let filtered = [], differentSender = [];;\r\n  let j = 0;\r\n  for (let i = 0; i < textDf.length - 1; ++i) {\r\n    if (textDf[i + 1].timestamp - textDf[j].timestamp > threshold) {\r\n      if (textDf[i + 1].senderId !== textDf[i].senderId) {\r\n        differentSender.push(textDf[i + 1].timestamp - textDf[i].timestamp);\r\n      }\r\n      filtered.push(textDf[i + 1].timestamp - textDf[i].timestamp);\r\n      j = i + 1;\r\n    }\r\n  }\r\n  return { filtered, differentSender };\r\n}\r\n\r\nconst TimeGapDistribution = ({ textDf, threshold }) => {\r\n  const timeGaps = textDf.slice(1).map((x, i) => x.timestamp - textDf[i].timestamp);\r\n  const { filtered, differentSender } = getFilteredTimeGaps(textDf, threshold);\r\n  const transform = x => Math.log10(x);\r\n  const tickvals = [1, 10, 60, 600, 3600, 5 * 3600, 86400, 7 * 86400, 30 * 86400].map(x => x * 1000);\r\n  const ticktext = ['1s', '10s', '1min', '10min', '1h', '5h', '1d', '7d', '30d'];\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Plot\r\n        data={[\r\n          { type: 'histogram', x: timeGaps.map(transform), name: 'Full' },\r\n          { type: 'histogram', x: filtered.map(transform), name: 'Filtered' },\r\n          { type: 'histogram', x: differentSender.map(transform), name: 'Different<br>Sender' },\r\n        ]}\r\n        layout={\r\n          {\r\n            xaxis: {\r\n              tickvals: tickvals.map(transform),\r\n              ticktext: ticktext\r\n            }\r\n          }\r\n        }\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default TimeGapDistribution;","import React from \"react\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport Plot from '../generic/Plot';\r\n\r\nconst plotlyColors = [\r\n  '#1f77b4',  // muted blue\r\n  '#ff7f0e',  // safety orange\r\n  '#2ca02c',  // cooked asparagus green\r\n  '#d62728',  // brick red\r\n  '#9467bd',  // muted purple\r\n  '#8c564b',  // chestnut brown\r\n  '#e377c2',  // raspberry yogurt pink\r\n  '#7f7f7f',  // middle gray\r\n  '#bcbd22',  // curry yellow-green\r\n  '#17becf'   // blue-teal\r\n];\r\n\r\nconst range = (start, end, step = 1) => {\r\n  let res = [];\r\n  for (let i = start; i < end; i += step) res.push(i);\r\n  return res;\r\n}\r\n\r\nconst WhoStartsConversations = ({ conversationDf }) => {\r\n  const theme = useTheme();\r\n\r\n  let rawData = {};\r\n  conversationDf.forEach(conv => {\r\n    if (rawData[conv.senderStart])\r\n      rawData[conv.senderStart].push(conv.timestampStart)\r\n    else\r\n      rawData[conv.senderStart] = [conv.timestampStart]\r\n  });\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Plot\r\n        data={[\r\n          ...Object.keys(rawData).map(sender =>\r\n          ({\r\n            type: 'histogram',\r\n            x: rawData[sender].map(x => new Date(x)),\r\n            name: sender,\r\n            legendgroup: sender,\r\n          })\r\n          ),\r\n          ...Object.keys(rawData).map((sender, idx) =>\r\n          ({\r\n            type: 'scatter',\r\n            x: rawData[sender].map(x => new Date(x)),\r\n            y: range(1, rawData[sender].length + 1),\r\n            name: \"Cumulative\",\r\n            legendgroup: sender,\r\n            line: { color: plotlyColors[idx % plotlyColors.length] },\r\n            opacity: 0.2,\r\n            yaxis: 'y2',\r\n          })\r\n          ),\r\n        ]}\r\n        layout={{\r\n          yaxis2: {\r\n            tickfont: { color: theme.palette.primary.contrastText },\r\n            anchor: 'free',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n            range: [1, Math.max(...Object.keys(rawData).map(k => rawData[k].length))],\r\n            position: .95\r\n          }\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default WhoStartsConversations;","import React from \"react\";\r\n\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Select from '@mui/material/Select';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nconst ITEM_HEIGHT = 40;\r\nconst ITEM_PADDING_TOP = 0;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst MultipleSelectCheckmarks = ({ state, setState, list }) => {\r\n  const handleChange = (event) => {\r\n    const { target: { value }, } = event;\r\n    setState(typeof value === 'string' ? value.split(',') : value,);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ m: 1, width: 300 }}>\r\n        <Select\r\n          multiple\r\n          value={state}\r\n          onChange={handleChange}\r\n          renderValue={(selected) => selected.join(', ')}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {list.map((name) => (\r\n            <MenuItem key={name} value={name}>\r\n              <Checkbox checked={state.indexOf(name) > -1} />\r\n              <ListItemText primary={name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default MultipleSelectCheckmarks;","import React, { useState } from \"react\";\n\nimport { Grid } from \"@mui/material\";\n\nimport * as d3 from \"d3\";\n\nimport MultipleSelectCheckmarks from \"../generic/MultipleSelectCheckmarks\";\n\nconst isNumber = x => x || (!x === 0);\n\nconst FollowUpTable = ({ table, reverseColors = false }) => {\n  const allSenders = Object.keys(table).filter(x => x !== \"\");\n  const [senders, setSenders] = useState(allSenders);\n\n  const vals = senders.flatMap(s => senders.map(a => table[s][a])).filter(isNumber);\n  const min = Math.min(...vals), max = Math.max(...vals);\n\n  const colorMap = d3[`interpolateTurbo`];\n  const reverse = x => reverseColors ? 1 - x : x;\n  const getBackgroundColor = (x) => {\n    if (isNumber(x))\n      return colorMap(reverse((x - min) / (max - min)) / 2 + .5);\n    return '';\n  }\n\n  return (\n    <>\n      <Grid container alignItems=\"center\">\n        Choose the users in the table:\n        <MultipleSelectCheckmarks list={allSenders} state={senders} setState={setSenders} />\n      </Grid>\n      <table>\n        <thead>\n          <tr><th>Sender\\Answerer</th>{senders.map((x, i) => <th key={i}>{x}</th>)}</tr>\n        </thead>\n        <tbody>\n          {senders.map((s, i) =>\n            <tr key={i}>\n              <td>{s}</td>\n              {senders.map((a, j) => <td key={j} style={{ backgroundColor: getBackgroundColor(table[s][a]), color: '#222' }}>\n                {`${table[s][a] ? table[s][a] : ''}`.slice(0, 5)}\n              </td>)}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </>\n\n  );\n};\n\nexport default FollowUpTable;","import React, { useState } from \"react\";\n\nimport { Grid, Slider } from \"@mui/material\";\n\nimport Plot from '../generic/Plot';\nimport { emaKernel, convolution } from \"../../engine/movingAverage\";\nimport MultipleSelectCheckmarks from \"../generic/MultipleSelectCheckmarks\";\n\nconst plotlyColors = [\n  '#1f77b4',  // muted blue\n  '#ff7f0e',  // safety orange\n  '#2ca02c',  // cooked asparagus green\n  '#d62728',  // brick red\n  '#9467bd',  // muted purple\n  '#8c564b',  // chestnut brown\n  '#e377c2',  // raspberry yogurt pink\n  '#7f7f7f',  // middle gray\n  '#bcbd22',  // curry yellow-green\n  '#17becf'   // blue-teal\n];\n\nconst defaultThreshold = 90;\n\nconst calculateValue = t => t / 100;\n\nconst CustomSlider = ({ setThresholdCommitted }) => {\n  const [state, setState] = useState(defaultThreshold);\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\n      Select smoothing: {calculateValue(state)}\n      <Slider\n        style={{ maxWidth: 300 }}\n        value={state}\n        onChange={(_, value) => setState(value)}\n        onChangeCommitted={(_, value) => setThresholdCommitted(calculateValue(value))}\n        scale={calculateValue}\n        min={0}\n        max={100}\n      />\n    </Grid>\n  );\n}\n\nconst UserEngagementInTime = ({ conversationDf, timeSerie, logaxis = false }) => {\n  const allSenders = Object.keys(timeSerie).filter(x => x !== \"\");\n  const [senders, setSenders] = useState(allSenders.slice(0, 2));\n  const [thresholdCommitted, setThresholdCommitted] = useState(calculateValue(defaultThreshold));\n  const emaK = emaKernel(timeSerie.length, thresholdCommitted);\n\n  let time = conversationDf.map(x => new Date(x.timestampStart));\n  let table = [];\n  senders.forEach(s => Object.keys(timeSerie[s]).forEach(a => {\n    if (s !== '' && a !== '') {\n      table.push({\n        x: timeSerie[s][a].map((x, i) => [x, i]).filter(x => x[0] !== Infinity).map(x => time[x[1]]),\n        y: convolution(timeSerie[s][a].filter(x => x !== Infinity), emaK),\n        type: 'scatter',\n        legendgroup: `${s} Vs ${a}`,\n        mode: 'lines',\n        name: `Moving Average`,\n        visible: 'legendonly',\n        line: { width: 7 },\n        opacity: 0.4\n      });\n    }\n  }));\n  const startLen = table.length;\n  senders.forEach(s => Object.keys(timeSerie[s]).forEach(a => {\n    if (s !== '' && a !== '') {\n      table.push({\n        x: time,\n        y: timeSerie[s][a],\n        type: 'scatter',\n        mode: 'markers',\n        name: `${s} Vs ${a}`,\n        legendgroup: `${s} Vs ${a}`,\n        visible: 'legendonly',\n        line: { color: plotlyColors[(table.length - startLen) % plotlyColors.length] },\n        opacity: 0.7\n      });\n    }\n  }));\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\n      Select senders: <MultipleSelectCheckmarks list={allSenders} state={senders} setState={setSenders} />\n      <CustomSlider setThresholdCommitted={setThresholdCommitted} />\n      <Plot data={table} layout={{\n        yaxis: {\n          type: logaxis ? 'log' : 'normal',\n          autorange: true\n        }\n      }} />\n    </Grid>\n  );\n}\n\nexport default UserEngagementInTime;","//------------------------------------------------------------------------------\r\n// The idea is to split the textDf into \"conversations\", a group of coesive \r\n// messages in time i.e. there is never a large enough time gap between them\r\n// Each conversation has its own followup tab so we can mesure the engagement\r\n// among users in time\r\n\r\nconst buildConversationDf = (textDf, threshold) => {\r\n  let conversationDf = [];\r\n  let i = 0, j = 0;\r\n  while (i < textDf.length) {\r\n    const mkMsg = (msg) => ({\r\n      sender: msg.sender,\r\n      senderId: msg.senderId,\r\n      timestamp: msg.timestamp,\r\n      count: 1\r\n    });\r\n    let conversation = [mkMsg(textDf[i])];\r\n    while ((j < textDf.length - 1) &&  // find conversation end\r\n      (textDf[j + 1].timestamp - textDf[j].timestamp <= threshold)) {\r\n      const backIdx = conversation.length - 1;\r\n      if (conversation[backIdx].sender === textDf[j + 1].sender) {   // group same consecutive sender\r\n        conversation[backIdx].count++;\r\n        conversation[backIdx].timestamp = new Date(textDf[j + 1].timestamp.getTime()\r\n          + conversation[backIdx].timestamp.getTime());\r\n      } else {\r\n        conversation.push(mkMsg(textDf[j + 1]));\r\n      }\r\n      j++;\r\n    }\r\n    const convRow = makeConversation(conversation);\r\n    if (convRow)\r\n      conversationDf.push(convRow);\r\n    i = ++j;\r\n  }\r\n  return conversationDf;\r\n}\r\n\r\nconst makeConversation = (conversationMsg) => {\r\n  const conversationMsgFiltered = conversationMsg.filter(x => x.senderId !== -1);\r\n  if (conversationMsgFiltered.length === 0)\r\n    return false;\r\n  let numMsgBySender = {};\r\n  conversationMsgFiltered.forEach(msg =>\r\n    numMsgBySender[msg.sender] = (numMsgBySender[msg.sender] || 0) + 1\r\n  )\r\n  return {\r\n    followup: makeFollowupTable(conversationMsgFiltered),\r\n    timestampStart: conversationMsgFiltered[0].timestamp / conversationMsgFiltered[0].count,\r\n    senderStart: conversationMsgFiltered[0].sender,\r\n    numMsg: conversationMsgFiltered.map(x => x.count).reduce((x, y) => x + y, 0),\r\n    numMsgBySender\r\n  };\r\n}\r\n\r\nconst prepareFollowupTable = (senders) => {\r\n  let table = {};\r\n  senders.forEach(s => {\r\n    let tmp = {};\r\n    senders.forEach(a => { if (a !== s) tmp[a] = [] });\r\n    table[s] = tmp;\r\n  });\r\n  return table;\r\n}\r\n\r\nconst makeFollowupTable = (conversationMsg) => {\r\n  const senders = [...new Set(conversationMsg.map(x => x.sender))];\r\n  let table = prepareFollowupTable(senders);\r\n  const firstAnswer = (idx, answerer) => {\r\n    for (let i = idx + 1; i < conversationMsg.length; ++i) {\r\n      if (conversationMsg[i].sender === answerer)\r\n        return conversationMsg[i].timestamp / conversationMsg[i].count;\r\n    }\r\n    return Infinity;\r\n  }\r\n  conversationMsg.forEach((msg, i) => {\r\n    senders.forEach(answerer => {\r\n      if (answerer !== msg.sender) {\r\n        table[msg.sender][answerer].push(\r\n          (firstAnswer(i, answerer) - msg.timestamp / msg.count) / 1000\r\n        );\r\n      }\r\n    });\r\n  });\r\n  return table;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// given the conversations in time we calculate the mean follow-up times for \r\n// each couple of users and the answer rate\r\n\r\nconst aggregateConversations = (textDf, conversationDf) => {\r\n  const senders = [...new Set(textDf.map(x => x.sender))];\r\n\r\n  let allAnswers = prepareFollowupTable(senders);\r\n  let numMsgSent = {};\r\n  let meanAnswerTimeSerie = prepareFollowupTable(senders);\r\n  let answerRateSerie = prepareFollowupTable(senders);\r\n\r\n  for (let t = 0; t < conversationDf.length; ++t) {\r\n    const row = conversationDf[t];\r\n    for (let i = 0; i < senders.length; ++i) {\r\n      const sender = senders[i];\r\n      numMsgSent[sender] = (numMsgSent[sender] || 0)\r\n        + (row.numMsgBySender[sender] ? row.numMsgBySender[sender] : 0);\r\n      for (let j = 0; j < senders.length; ++j) {\r\n        const answerer = senders[j];\r\n        if (i !== j) {\r\n          if (row.followup[sender] && row.followup[sender][answerer]) {\r\n            const goodAnswers = row.followup[sender][answerer].filter(x => x !== Infinity);\r\n            allAnswers[sender][answerer] = allAnswers[sender][answerer].concat(goodAnswers);\r\n            if (goodAnswers.length > 0)\r\n              meanAnswerTimeSerie[sender][answerer].push(goodAnswers.reduce((x, y) => x + y) / goodAnswers.length);\r\n            else\r\n              meanAnswerTimeSerie[sender][answerer].push(Infinity);\r\n            answerRateSerie[sender][answerer].push(goodAnswers.length / row.numMsgBySender[sender]);\r\n          } else {\r\n            answerRateSerie[sender][answerer].push(0);\r\n            meanAnswerTimeSerie[sender][answerer].push(Infinity);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { meanAnswerTimeSerie, answerRateSerie, allAnswers, numMsgSent }\r\n}\r\n\r\nconst aggregateAllAnswers = (allAnswers, numMsgSent) => {\r\n  const senders = Object.keys(allAnswers);\r\n  let meanAnswerTime = prepareFollowupTable(senders);\r\n  let answerRate = prepareFollowupTable(senders);\r\n\r\n  for (let i = 0; i < senders.length; ++i) {\r\n    const sender = senders[i];\r\n    for (let j = 0; j < senders.length; ++j) {\r\n      const answerer = senders[j];\r\n      if (i !== j) {\r\n        meanAnswerTime[sender][answerer] = allAnswers[sender][answerer].reduce((x, y) => x + y, 0)\r\n          / allAnswers[sender][answerer].length;\r\n        answerRate[sender][answerer] = allAnswers[sender][answerer].length\r\n          / numMsgSent[sender];\r\n      }\r\n    }\r\n  }\r\n\r\n  return { meanAnswerTime, answerRate }\r\n}\r\n\r\nexport { buildConversationDf, aggregateConversations, aggregateAllAnswers }","import React, { useState } from \"react\";\n\nimport Divider from '@mui/material/Divider';\nimport Typography from \"@mui/material/Typography\";\nimport { Grid, IconButton, Slider, Tooltip } from \"@mui/material\";\n\nimport HelpIcon from '@mui/icons-material/Help';\n\nimport BasicTabs from \"../generic/BasicTabs\";\nimport TimeGapDistribution from \"./TimeGapDistribution\";\nimport WhoStartsConversations from \"./WhoStartsConversations\";\nimport FollowUpTable from \"./FollowUpTable\";\nimport UserEngagementInTime from \"./UserEngagementInTime\";\nimport {\n  buildConversationDf,\n  aggregateConversations,\n  aggregateAllAnswers\n} from \"../../engine/conversations\";\n\nconst labels = [\n  \"Time Gap Distribution\",\n  \"Who Starts Conversations\",\n  \"User Follow-Up Time\",\n  \"User Follow-Up Rate\",\n  \"Mean Follow-Up Time\",\n  \"Mean Follow-Up Rate\",\n];\n\nconst calculateValue = t => 1000 * 5 * 60 * 1.07 ** t;\nconst calculateLabel = t => {\n  const r = x => Math.trunc(x / 100) / 10;\n  if (t < 1000 * 60) return `${r(t)} s`;\n  if (t < 1000 * 60 * 60) return `${r(t / 60)} min`;\n  if (t < 1000 * 60 * 60 * 24) return `${r(t / 3600)} h`;\n  return `${r(t / 86400)} day`;\n}\n\nconst defaultThreshold = 50;\n\nconst CustomSlider = ({ setThresholdCommitted }) => {\n  const [state, setState] = useState(defaultThreshold);\n  return (\n    <Grid container>\n      Threshold: {calculateLabel(calculateValue(state))}\n      <Slider\n        value={state}\n        onChange={(_, value) => setState(value)}\n        onChangeCommitted={(_, value) => setThresholdCommitted(calculateValue(value))}\n        valueLabelFormat={calculateLabel}\n        scale={calculateValue}\n        min={0}\n        max={100}\n      />\n    </Grid>\n  );\n}\n\nconst Followups = ({ textDf }) => {\n  const [thresholdCommitted, setThresholdCommitted] = useState(calculateValue(defaultThreshold));\n\n  const conversationDf = buildConversationDf(textDf, thresholdCommitted);\n  const { meanAnswerTimeSerie, answerRateSerie, allAnswers, numMsgSent }\n    = aggregateConversations(textDf, conversationDf);\n  const { meanAnswerTime, answerRate } = aggregateAllAnswers(allAnswers, numMsgSent);\n\n  return (\n    <React.Fragment>\n      <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n      <Grid container>\n        <Typography variant=\"h6\">\n          Partition Messages into Conversations and Analyze Follow-Up Times\n        </Typography>\n        <Tooltip title={<ul><li>Toggle the sender by clicking on the legend on the right</li><li>Fine tune the separation parameter manually using the slider</li></ul>}>\n          <IconButton size=\"small\">\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <CustomSlider setThresholdCommitted={setThresholdCommitted} />\n      <BasicTabs labels={labels} tabs={[\n        { component: () => <TimeGapDistribution textDf={textDf} threshold={thresholdCommitted} /> },\n        { component: () => <WhoStartsConversations conversationDf={conversationDf} /> },\n        { component: () => <UserEngagementInTime logaxis timeSerie={meanAnswerTimeSerie} conversationDf={conversationDf} /> },\n        { component: () => <UserEngagementInTime timeSerie={answerRateSerie} conversationDf={conversationDf} /> },\n        { component: () => <FollowUpTable table={meanAnswerTime} /> },\n        { component: () => <FollowUpTable reverseColors table={answerRate} /> }\n      ]} />\n    </React.Fragment>\n  );\n}\n\nexport default Followups;","import React, { useState } from 'react';\n\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\n\nconst TabPanel = (props) => {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n}\n\nconst allyProps = (index) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst BasicTabs = ({ labels, tabs }) => {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs variant=\"scrollable\" scrollButtons allowScrollButtonsMobile\n          value={value} onChange={handleChange} textColor=\"inherit\"\n        >\n          {labels.map((l, i) => <Tab label={l} key={i} {...allyProps(i)} />)}\n        </Tabs>\n      </Box>\n      {tabs.map((t, i) =>\n        <TabPanel value={value} index={i} key={i}>\n          <t.component />\n        </TabPanel>\n      )}\n    </Box>\n  );\n}\n\nexport default BasicTabs;","import React from \"react\";\n\nimport { useTheme } from \"@mui/system\";\n\nimport Plot from 'react-plotly.js';\n\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n// -----------------------------------------------------------------------------\n\nconst defaultLayout = (theme) => ({\n  width: '100%', height: 500, margin: {\n    l: 40,\n    r: 20,\n    b: 18,\n    t: 30,\n    pad: 0\n  },\n  paper_bgcolor: theme.palette.background.paper,\n  plot_bgcolor: theme.palette.background.paper,\n  xaxis: {\n    color: theme.palette.text.primary,\n  },\n  yaxis: {\n    color: theme.palette.text.primary\n  },\n  legend: {\n    font: {\n      color: theme.palette.text.primary\n    },\n  },\n  title: {\n    font: {\n      color: theme.palette.text.primary,\n    }\n  },\n  scene: {\n    xaxis: {\n      color: theme.palette.text.primary\n    },\n    yaxis: {\n      color: theme.palette.text.primary\n    },\n    zaxis: {\n      color: theme.palette.text.primary\n    },\n  }\n});\n\nconst CustomPlot = (props) => {\n  const theme = useTheme();\n  const layout = defaultLayout(theme);\n  return (\n    <Plot\n      data={props.data}\n      layout={props.layout ? mergeDeep(props.layout, layout) : layout}\n    />\n  );\n}\n\nexport default CustomPlot;"],"names":["_ref","textDf","threshold","timeGaps","slice","map","x","i","timestamp","_getFilteredTimeGaps","filtered","differentSender","j","length","senderId","push","getFilteredTimeGaps","transform","Math","log10","tickvals","_jsx","Grid","container","justifyContent","children","Plot","data","type","name","layout","xaxis","ticktext","plotlyColors","range","start","end","step","arguments","undefined","res","conversationDf","theme","useTheme","rawData","forEach","conv","senderStart","timestampStart","concat","_toConsumableArray","Object","keys","sender","Date","legendgroup","idx","y","line","color","opacity","yaxis","yaxis2","tickfont","palette","primary","contrastText","anchor","overlaying","side","max","apply","k","position","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","state","setState","list","FormControl","sx","m","Select","multiple","value","onChange","event","target","split","renderValue","selected","join","_jsxs","MenuItem","Checkbox","checked","indexOf","ListItemText","isNumber","table","_ref$reverseColors","reverseColors","allSenders","filter","_useState","useState","_useState2","_slicedToArray","senders","setSenders","vals","flatMap","s","a","min","colorMap","d3","getBackgroundColor","reverse","_Fragment","alignItems","MultipleSelectCheckmarks","backgroundColor","calculateValue","t","CustomSlider","setThresholdCommitted","Slider","maxWidth","_","onChangeCommitted","scale","_ref2","timeSerie","_ref2$logaxis","logaxis","_useState3","_useState4","_useState5","_useState6","thresholdCommitted","emaK","emaKernel","time","Infinity","convolution","mode","visible","startLen","autorange","makeConversation","conversationMsg","conversationMsgFiltered","numMsgBySender","msg","followup","makeFollowupTable","count","numMsg","reduce","prepareFollowupTable","tmp","Set","answerer","firstAnswer","labels","pow","calculateLabel","r","trunc","valueLabelFormat","mkMsg","conversation","backIdx","getTime","convRow","buildConversationDf","_aggregateConversatio","allAnswers","numMsgSent","meanAnswerTimeSerie","answerRateSerie","row","goodAnswers","aggregateConversations","_aggregateAllAnswers","meanAnswerTime","answerRate","aggregateAllAnswers","React","Divider","marginTop","marginBottom","Typography","variant","Tooltip","title","IconButton","size","HelpIcon","BasicTabs","tabs","component","TimeGapDistribution","WhoStartsConversations","UserEngagementInTime","FollowUpTable","TabPanel","props","index","other","_objectWithoutProperties","_excluded","_objectSpread","role","hidden","id","setValue","Box","borderBottom","borderColor","Tabs","scrollButtons","allowScrollButtonsMobile","newValue","textColor","l","Tab","label","isObject","item","Array","isArray","mergeDeep","_len","sources","_key","source","shift","key","assign","_defineProperty","height","margin","b","pad","paper_bgcolor","background","paper","plot_bgcolor","text","legend","font","scene","zaxis","defaultLayout"],"sourceRoot":""}