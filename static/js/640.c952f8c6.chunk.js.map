{"version":3,"file":"static/js/640.c952f8c6.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/WaText/components/TimeDistribution.jsx","App/pages/Projects/projects/WaText/components/generic/BasicTabs.jsx","App/pages/Projects/projects/WaText/components/generic/Plot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Grid, IconButton, ToggleButton, Tooltip } from \"@mui/material\";\r\n\r\nimport HelpIcon from '@mui/icons-material/Help';\r\n\r\nimport Plot from './generic/Plot';\r\nimport * as d3 from \"d3\";\r\nimport BasicTabs from \"./generic/BasicTabs\";\r\n\r\n// For more time formatting types, see: https://github.com/d3/d3-time-format/blob/master/README.md\r\nconst plotGenerator = (textDf, layout) => {\r\n  const groupBySender = d3.group(textDf, x => x.sender);\r\n  let timestampBySender = [];\r\n  groupBySender.forEach((val, key) => {\r\n    if (key !== \"\") timestampBySender.push({\r\n      type: 'histogram',\r\n      x: val.map(x => x.timestamp),\r\n      name: key,\r\n      opacity: 0.75,\r\n    })\r\n  });\r\n  return () => {\r\n    return (\r\n      <Grid container justifyContent=\"center\">\r\n        <Plot\r\n          data={[\r\n            { type: 'histogram', x: textDf.map(x => x.timestamp), name: 'Total', opacity: 0.75, },\r\n            ...timestampBySender\r\n          ]}\r\n          layout={layout}\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst copyDate = (date, year = null, month = null, day = null) => {\r\n  if (year === null) {\r\n    return date;\r\n  } else if (month === null) {\r\n    return new Date(year, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\r\n  } else if (day === null) {\r\n    return new Date(year, month, date.getDay() + 1, date.getHours(), date.getMinutes(), date.getSeconds());\r\n  } else {\r\n    return new Date(year, month, day, date.getHours(), date.getMinutes(), date.getSeconds());\r\n  }\r\n}\r\n\r\nconst TimeDistribution = ({ textDf }) => {\r\n  const [fine, setFine] = useState(false);\r\n  return (\r\n    <React.Fragment>\r\n      <Divider style={{ marginTop: 10, marginBottom: 10 }} />\r\n      <Grid container justifyContent=\"space-between\">\r\n        <Grid item>\r\n          <Grid container>\r\n            <Typography variant=\"h6\">\r\n              Time Distribution\r\n            </Typography>\r\n            <Tooltip title={<ul><li>Toggle the sender by clicking on the legend on the right</li><li>Change the binning from coarse to fine (not avaiable for Total)</li></ul>}>\r\n              <IconButton size=\"small\">\r\n                <HelpIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <ToggleButton value={fine} selected={fine} size=\"small\" onClick={() => setFine(f => !f)}>Fine Binning</ToggleButton>\r\n        </Grid>\r\n      </Grid>\r\n      {\r\n        fine ?\r\n          <BasicTabs labels={[\"Total\", \"Yearly\", \"Weekly\", \"Daily\"]}\r\n            tabs={[\r\n              { component: plotGenerator(textDf) },\r\n              { component: plotGenerator(textDf.map(x => ({ ...x, timestamp: copyDate(x.timestamp, 2021) }))) },\r\n              {\r\n                component: plotGenerator(\r\n                  textDf.map(x => ({ ...x, timestamp: copyDate(x.timestamp, 2017, 0) })), // first jan 2017 is Sunday\r\n                  {\r\n                    xaxis: {\r\n                      tickformat: '%a'\r\n                    }\r\n                  })\r\n              },\r\n              { component: plotGenerator(textDf.map(x => ({ ...x, timestamp: copyDate(x.timestamp, 2021, 0, 1) }))) },\r\n            ]}\r\n          />\r\n          :\r\n          <BasicTabs labels={[\"Total\", \"Yearly\", \"Weekly\", \"Daily\"]}\r\n            tabs={[\r\n              { component: plotGenerator(textDf) },\r\n              { component: plotGenerator(textDf.map(x => ({ ...x, timestamp: x.timestamp.getMonth() }))) },\r\n              {\r\n                component: plotGenerator(\r\n                  textDf.map(x => ({ ...x, timestamp: x.timestamp.getDay() })),\r\n                  {\r\n                    xaxis: {\r\n                      tickvals: [0, 1, 2, 3, 4, 5, 6],\r\n                      ticktext: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n                    }\r\n                  }\r\n                )\r\n              },\r\n              { component: plotGenerator(textDf.map(x => ({ ...x, timestamp: x.timestamp.getHours() }))) },\r\n            ]}\r\n          />\r\n      }\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default TimeDistribution;","import React, { useState } from 'react';\n\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\n\nconst TabPanel = (props) => {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n}\n\nconst allyProps = (index) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst BasicTabs = ({ labels, tabs }) => {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs variant=\"scrollable\" scrollButtons allowScrollButtonsMobile\n          value={value} onChange={handleChange} textColor=\"inherit\"\n        >\n          {labels.map((l, i) => <Tab label={l} key={i} {...allyProps(i)} />)}\n        </Tabs>\n      </Box>\n      {tabs.map((t, i) =>\n        <TabPanel value={value} index={i} key={i}>\n          <t.component />\n        </TabPanel>\n      )}\n    </Box>\n  );\n}\n\nexport default BasicTabs;","import React from \"react\";\n\nimport { useTheme } from \"@mui/system\";\n\nimport Plot from 'react-plotly.js';\n\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n// -----------------------------------------------------------------------------\n\nconst defaultLayout = (theme) => ({\n  width: '100%', height: 500, margin: {\n    l: 40,\n    r: 20,\n    b: 18,\n    t: 30,\n    pad: 0\n  },\n  paper_bgcolor: theme.palette.background.paper,\n  plot_bgcolor: theme.palette.background.paper,\n  xaxis: {\n    color: theme.palette.text.primary,\n  },\n  yaxis: {\n    color: theme.palette.text.primary\n  },\n  legend: {\n    font: {\n      color: theme.palette.text.primary\n    },\n  },\n  title: {\n    font: {\n      color: theme.palette.text.primary,\n    }\n  },\n  scene: {\n    xaxis: {\n      color: theme.palette.text.primary\n    },\n    yaxis: {\n      color: theme.palette.text.primary\n    },\n    zaxis: {\n      color: theme.palette.text.primary\n    },\n  }\n});\n\nconst CustomPlot = (props) => {\n  const theme = useTheme();\n  const layout = defaultLayout(theme);\n  return (\n    <Plot\n      data={props.data}\n      layout={props.layout ? mergeDeep(props.layout, layout) : layout}\n    />\n  );\n}\n\nexport default CustomPlot;"],"names":["plotGenerator","textDf","layout","groupBySender","d3","x","sender","timestampBySender","forEach","val","key","push","type","map","timestamp","name","opacity","_jsx","Grid","container","justifyContent","children","Plot","data","concat","copyDate","date","year","arguments","length","undefined","month","day","Date","getMonth","getDate","getHours","getMinutes","getSeconds","getDay","_ref","_useState","useState","_useState2","_slicedToArray","fine","setFine","_jsxs","React","Divider","style","marginTop","marginBottom","item","Typography","variant","Tooltip","title","IconButton","size","HelpIcon","ToggleButton","value","selected","onClick","f","BasicTabs","labels","tabs","component","_objectSpread","xaxis","tickformat","tickvals","ticktext","TabPanel","props","index","other","_objectWithoutProperties","_excluded","role","hidden","id","setValue","Box","sx","width","borderBottom","borderColor","Tabs","scrollButtons","allowScrollButtonsMobile","onChange","event","newValue","textColor","l","i","Tab","label","t","isObject","Array","isArray","mergeDeep","target","_len","sources","_key","source","shift","Object","assign","_defineProperty","apply","theme","height","margin","r","b","pad","paper_bgcolor","palette","background","paper","plot_bgcolor","color","text","primary","yaxis","legend","font","scene","zaxis","defaultLayout","useTheme"],"sourceRoot":""}