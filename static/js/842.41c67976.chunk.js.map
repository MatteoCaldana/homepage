{"version":3,"file":"static/js/842.41c67976.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/Maps/FullscreenControl.jsx","App/pages/Projects/projects/Maps/mapTiles.js","App/pages/Projects/projects/Maps/MapBox.jsx","App/pages/Projects/projects/Maps/UploadFile.jsx","App/pages/Projects/projects/Maps/index.jsx","App/pages/Projects/projects/WaText/engine/movingAverage.js"],"sourcesContent":["import L from 'leaflet';\nimport 'leaflet.fullscreen';\nimport 'leaflet.fullscreen/Control.FullScreen.css';\nimport { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\nconst FullscreenControl = (props) => {\n  const map = useMap();\n\n  useEffect(() => {\n    // create control\n    const control = L.control.fullscreen(props);\n    // link control to map\n    control.addTo(map);\n\n    return () => {\n      // get leaflet-control-zoom-fullscreen elements that need to be removed from container\n      const elementsToRemove =\n        control.getContainer()?.getElementsByClassName('leaflet-control-zoom-fullscreen') ?? [];\n      for (const element of elementsToRemove) {\n        // remove them\n        element.remove();\n      }\n    };\n  }, []);\n\n  return null;\n};\n\nexport default FullscreenControl;","// sources:\n// https://www.alspergis.altervista.org/hikemaps.html\n// https://github.com/leaflet-extras/leaflet-providers\n// https://leaflet-extras.github.io/leaflet-providers/preview/\n\nconst MAP_TILES = [\n    {\n        attribution: '&copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors,<a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        name: 'OpenStreetMap',\n        maxNativeZoom: 19,\n    },\n    {\n        url: 'https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png',\n        maxNativeZoom: 18,\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        name: \"OpenStreetMap.DE\"\n    },\n    {\n        url: 'https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png',\n        maxNativeZoom: 20,\n        attribution: '&copy; OpenStreetMap France | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        name: \"OpenStreetMap.FR\"\n    },\n    {\n        url: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n        maxNativeZoom: 19,\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>',\n        name: \"OpenStreetMap.HOT\"\n    },\n    {\n        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n        maxNativeZoom: 16,\n        attribution: 'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        name: \"OpenTopoMap\"\n    },\n    {\n        attribution: '<a href=\"https://wiki.openstreetmap.org/wiki/Hiking/mri\">&copy; sly</a> MODIS/Terra Snow Cover 8-day by NSDIC | ASTER GDEM is a product of METI and NASA | SRTM V4 thanks to CGIAR-CSI<br>EU-DEM produced using Copernicus data and information funded by the European Union | Données <a href=\"http://www.openstreetmap.org/copyright\">&copy; les contributeurs OpenStreetMap</a>',\n        url: 'https://maps.refuges.info/hiking/{z}/{x}/{y}.png',\n        name: 'OpenStreetMap Hike',\n        maxNativeZoom: 18,\n    },\n    // TODO: register API KEY to use in prod\n    //       https://stackoverflow.com/questions/61358989/react-leaflet-not-loading-tiles-and-gilving-403-request-error\n    // {\n    //     url: 'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png',\n    //     attribution: '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n    //     name: \"Stadia.OSM\",\n    //     maxNativeZoom: 20\n    // },\n    // {\n    //     url: 'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',\n    //     attribution: '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n    //     name: \"Stadia.Outdoors\",\n    //     maxNativeZoom: 20\n    // },\n    {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &amp; USGS',\n        url: 'http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png',\n        name: 'mtbmap',\n        maxNativeZoom: 18,\n    },\n    {\n        attribution: 'Data by <a href=\"http://www.openstreetmap.org\" target=\"_blank\" title=\"OpenStreetMap.org\">OpenStreetMap.org</a> contributors under <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\" target=\"_blank\">CC BY-SA 2.0</a> license<em> | Tiles: © Toursprung GmbH</em>',\n        url: 'https://vtile01.maptoolkit.net/raster/toursprung/terrain/{z}/{x}/{y}.png',\n        name: 'toursprung',\n        maxNativeZoom: 19,\n    },\n    {\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n        name: \"Esri.WorldImagery\",\n        maxNativeZoom: 24,\n    }\n]\n\nconst MAP_OVERLAYS = [\n    {\n        attribution: '&copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors,<a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n        url: 'https://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png',\n        name: \"waymarkedtrails\",\n        maxNativeZoom: 18,\n    },\n    {\n        attribution: '&copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors,<a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n        url: 'https://a.gps-tile.openstreetmap.org/lines/{z}/{x}/{y}.png',\n        name: \"GPS Tracks\",\n        maxNativeZoom: 24,\n    },\n];\n\nexport { MAP_TILES, MAP_OVERLAYS };","import { LayersControl, MapContainer, TileLayer, CircleMarker, Circle, Polyline } from 'react-leaflet';\nimport { useMap } from 'react-leaflet/hooks'\nimport 'leaflet/dist/leaflet.css';\n\nimport FullscreenControl from './FullscreenControl';\nimport { MAP_OVERLAYS, MAP_TILES } from './mapTiles'\n\nconst meanPosition = (data) =>\n  data.map(x => [x.latitude, x.longitude])\n    .reduce((a, b) => [a[0] + b[0], a[1] + b[1]])\n    .map(x => x / data.length)\n\n\nconst DataOverlay = ({ data }) => {\n  if (data && data[0] && data[0].accuracy) {\n    if (data.length === 1) {\n      return (\n        <>\n          <CircleMarker center={[data[0].latitude, data[0].longitude]} radius={2} fill={true} opacity={1} fillOpacity={1}/>\n          <Circle center={[data[0].latitude, data[0].longitude]} radius={data[0].accuracy} />\n        </>\n      );\n    } else {\n      // TODO: color polyline based on scalar field\n      // TODO: show accuracy\n      return <Polyline positions={data.map(x => [x.latitude, x.longitude])} />;\n      // return (\n      //   <>\n      //     {data.map((x, i) =>\n      //       <Circle key={i} center={[x.latitude, x.longitude]} radius={x.accuracy} pathOptions={{ color: colormap['RdGr'](x.ele_norm) }} />\n      //     )}\n      //   </>\n      // );\n    }\n  }\n  return <></>;\n}\n\n\nconst ChangeViewOnCenterChange = ({ center }) => {\n  const map = useMap();\n  const old_center = map.getCenter();\n  const diff = [old_center.lat - center[0], old_center.lng - center[1]];\n  if (diff[0] * diff[0] + diff[1] * diff[1] > 1e-3)\n    map.setView(center, map.getZoom());\n  return null;\n}\n\nconst MapBox = ({ data, hoverPointIdx }) => {\n  const center = meanPosition(data);\n  return (\n    <MapContainer\n      center={center}\n      zoom={13}\n      style={{ height: 400, width: \"100%\" }}\n    >\n      <ChangeViewOnCenterChange center={center} />\n      <DataOverlay data={data} />\n      {hoverPointIdx && <CircleMarker center={[data[hoverPointIdx].latitude, data[hoverPointIdx].longitude]} radius={2} color='black' />}\n      <FullscreenControl />\n      <LayersControl position=\"topright\">\n        {\n          MAP_TILES.map((m, i) =>\n            <LayersControl.BaseLayer key={i} checked={i === 0} name={m.name}>\n              <TileLayer\n                attribution={m.attribution}\n                url={m.url}\n              />\n            </LayersControl.BaseLayer>\n          )\n        }\n        {\n          MAP_OVERLAYS.map((m, i) =>\n            <LayersControl.Overlay key={i} name={m.name}>\n              <TileLayer\n                attribution={m.attribution}\n                url={m.url}\n              />\n            </LayersControl.Overlay>\n          )\n        }\n      </LayersControl>\n    </MapContainer>\n  );\n}\n\nexport default MapBox;","import React, { useState } from 'react';\n\nimport { Box, Button, LinearProgress } from '@mui/material';\nimport { UploadFileOutlined } from '@mui/icons-material';\n\nimport { wmaKernel, convolution } from \"../WaText/engine/movingAverage\";\n\nconst PI_180 = 1.7453292519943295e-02;\n\nconst deg2rad = (deg) => {\n  return deg * PI_180;\n}\n\nconst earthRadius = (lat) => {\n  // https://rechneronline.de/earth-radius/\n  const r1 = 6378137; // equator radius\n  const r2 = 6371001; // poles radius \n  const r1cos = r1 * Math.cos(lat);\n  const r2sin = r2 * Math.sin(lat);\n  const num = Math.pow(r1 * r1cos, 2) + Math.pow(r2 * r2sin, 2);\n  const den = Math.pow(r1cos, 2) + Math.pow(r2sin, 2);\n  return Math.sqrt(num / den);\n}\n\nconst dist2d = (a, b) => {\n  const R = earthRadius((a.latRad + b.latRad) / 2.0);\n  const dLat = b.latRad - a.latRad;\n  const dLon = b.lonRad - a.lonRad;\n  const r = Math.sin(dLat / 2) *\n    Math.sin(dLat / 2) +\n    Math.cos(a.latRad) *\n    Math.cos(b.latRad) *\n    Math.sin(dLon / 2) *\n    Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(r), Math.sqrt(1 - r));\n  const d = R * c;\n  return d;\n}\n\nconst dist3d = (a, b) => {\n  // https://github.com/mpetazzoni/leaflet-gpx/blob/f446d48935f5f489bd341479c53c2b31c2a32bd5/gpx.js#L630\n  const planar = dist2d(a, b);\n  const height = Math.abs(b.ele - a.ele);\n  return {\n    dist: Math.sqrt(Math.pow(planar, 2) + Math.pow(height, 2)),\n    steep: height / planar\n  };\n}\n\n/*!\n * JavaScript function to calculate the destination point given start point latitude / longitude (numeric degrees), bearing (numeric degrees) and distance (in m).\n *\n * Original scripts by Chris Veness\n * Taken from http://movable-type.co.uk/scripts/latlong-vincenty-direct.html and optimized / cleaned up by Mathias Bynens <http://mathiasbynens.be/>\n * Based on the Vincenty direct formula by T. Vincenty, “Direct and Inverse Solutions of Geodesics on the Ellipsoid with application of nested equations”, Survey Review, vol XXII no 176, 1975 <http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf>\n */\n\nfunction distVincenty(p1, p2) {\n  const a = 6378137,\n    b = 6356752.3142,\n    f = 1 / 298.257223563, // WGS-84 ellipsoid params\n    L = p2.lonRad - p1.lonRad,\n    U1 = Math.atan((1 - f) * Math.tan(p1.latRad)),\n    U2 = Math.atan((1 - f) * Math.tan(p2.latRad)),\n    sinU1 = Math.sin(U1),\n    cosU1 = Math.cos(U1),\n    sinU2 = Math.sin(U2),\n    cosU2 = Math.cos(U2);\n  let lambda = L, lambdaP, iterLimit = 100;\n  do {\n    var sinLambda = Math.sin(lambda),\n      cosLambda = Math.cos(lambda),\n      sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n    if (0 === sinSigma) {\n      return 0; // co-incident points\n    };\n    var cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda,\n      sigma = Math.atan2(sinSigma, cosSigma),\n      sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma,\n      cosSqAlpha = 1 - sinAlpha * sinAlpha,\n      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha,\n      C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\n    if (isNaN(cos2SigmaM)) {\n      cos2SigmaM = 0; // equatorial line: cosSqAlpha = 0 (§6)\n    };\n    lambdaP = lambda;\n    lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n  } while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0);\n\n  if (!iterLimit) {\n    return NaN; // formula failed to converge\n  };\n\n  const uSq = cosSqAlpha * (a * a - b * b) / (b * b),\n    A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq))),\n    B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq))),\n    deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM))),\n    s = b * A * (sigma - deltaSigma);\n  return s; // round to 1mm precision\n};\n\nconst getElemContent = (elemHTML, tag) => {\n  return elemHTML.getElementsByTagName(tag)[0].innerHTML;\n}\n\nconst parseXml = (xml) => {\n  let prevPt;\n  return Array.from(xml.getElementsByTagName(\"trkpt\")).map((e, i) => {\n    const date = new Date(getElemContent(e, 'time'));\n    const parsed = Object.fromEntries(\n      [\n        'ele',\n        'course',\n        'hAcc',\n        'vAcc',\n        'speed',\n      ].map(x => [x, parseFloat(getElemContent(e, x))])\n    )\n    const lat_lon = ['lat', 'lon'].map(x => parseFloat(e.getAttribute(x)));\n    let pt = {\n      ...parsed,\n      hAccuracy: parsed.hAcc,\n      vAccuracy: parsed.vAcc,\n      accuracy: Math.sqrt(parsed.hAcc * parsed.hAcc + parsed.vAcc * parsed.vAcc),\n      latitude: lat_lon[0],\n      longitude: lat_lon[1],\n      latRad: deg2rad(lat_lon[0]),\n      lonRad: deg2rad(lat_lon[1]),\n      date: date,\n      timestamp: date.getTime(),\n      activeTime: i,\n    }\n    if (i > 0) {\n      const { dist, steep } = dist3d(pt, prevPt);\n      // we assume data is captured every second\n      // if faster than 5.5m/s than we assume missing data\n      // pt.speed3d = dist > 5.5 ? 0 : dist;\n      pt.distance = prevPt.distance + dist;\n      //pt.distVi = prevPt.distVi + distVincenty(pt, prevPt);\n      //pt.distance = prevPt.distance + pt.speed;\n      pt.steepness = isFinite(steep) ? steep * 100 : 0;\n      //const tmp = (pt.ele - prevPt.ele) * 200 / (pt.speed + prevPt.speed);\n      //pt.steepness = isFinite(tmp) ? Math.sign(tmp) * Math.min(Math.abs(tmp), 100) : 0;\n    } else {\n      pt.dist3d = 0;\n      pt.distVi = 0;\n      pt.speed3d = 0;\n      pt.steepness = 0;\n      pt.distance = pt.speed;\n    }\n    prevPt = pt;\n    return pt;\n  });\n}\n\nconst UploadFile = ({ setData }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const parseFile = (file) => {\n    if (!file) return;\n    file.text().then(text => {\n      const parser = new DOMParser();\n      const xml = parser.parseFromString(text, \"text/xml\");\n\n      const data = parseXml(xml);\n\n      const FIELDS = ['ele', 'speed', 'accuracy'];\n      const FIELDS_SMOOTH = ['speed', 'steepness'];\n      const kernel_w = wmaKernel(data.length, 90);\n      //const kernel_e = emaKernel(data.length, 0.98);\n      const smoothElem = Object.fromEntries(\n        FIELDS_SMOOTH.map(\n          f =>\n            [\n              `${f}`,\n              convolution(data.map(x => x[f]), kernel_w)\n            ],\n        )\n      );\n\n      const fminmax = Object.fromEntries(FIELDS.map(field =>\n        [field, [\n          Math.min(...data.map(o => o[field])),\n          Math.max(...data.map(o => o[field]))\n        ]]\n      ))\n\n      let normData = [];\n      for (let i = 0; i < data.length; ++i) {\n        const normElem = Object.fromEntries(FIELDS.map(f => [`${f}_norm`, (data[i][f] - fminmax[f][0]) / (fminmax[f][1] - fminmax[f][0])]));\n        normData.push({ ...data[i], ...normElem });\n        Object.entries(smoothElem).forEach(keyval => { normData[i][keyval[0]] = keyval[1][i]; });\n      }\n\n      setData(normData);\n      setIsLoading(false);\n    })\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"info\"\n        endIcon={<UploadFileOutlined />}\n        component=\"label\"\n        style={{ alignItems: 'center', display: 'flex', marginBottom: 10 }}\n        disabled={isLoading}\n      >\n        {isLoading ? \"File is being parsed, please wait\" : \"Upload GPX Track\"}\n        <input\n          onChange={e => { setIsLoading(true); parseFile(e.target.files.item(0)) }}\n          type=\"file\" accept='.gpx' hidden\n        />\n      </Button>\n      <Box sx={{ width: '100%' }}>\n      {isLoading && <LinearProgress color=\"info\" size=\"lg\"/>}\n    </Box>\n    </>\n  );\n}\n\nexport default UploadFile;","import React, { lazy, useState, useEffect } from 'react';\n\nimport useGeolocation from \"react-hook-geolocation\";\n\nimport wrapWithLoading from '../../../../../components/wrapWithLoading';\nimport MapBox from './MapBox';\nimport UploadFile from './UploadFile';\nimport img from \"../../../../../assets/projects/gpx.jpg\"\n\nconst DataPlot = lazy(() => import(\"./DataPlot\"));\n\nconst GeolocationStats = ({ geolocation }) => {\n  return (\n    <>\n      <h4>Geolocation Data:</h4>\n      {!geolocation.error ? (\n        <ul style={{ columns: 2 }}>\n          <li>Latitude: {geolocation.latitude?.toFixed(5)} &#177; {Math.round(geolocation.accuracy)}</li>\n          <li>Longitude: {geolocation.longitude?.toFixed(5)} &#177; {Math.round(geolocation.accuracy)}</li>\n          <li>Altitude: {geolocation.altitude?.toFixed(1)} &#177; {geolocation.altitudeAccuracy?.toFixed(1)}</li>\n          <li>Heading: {geolocation.heading?.toFixed(2)}</li>\n          <li>Speed: {geolocation.speed?.toFixed(2)}</li>\n          <li>Timestamp: {geolocation.timestamp}</li>\n        </ul>\n      ) : (\n        <p>Geolocation is not available, sorry.</p>\n      )}\n    </>\n  );\n};\n\nconst SuspenseDataPlot = wrapWithLoading(DataPlot);\n\nconst Maps = () => {\n  const geolocation = useGeolocation({ enableHighAccuracy: true });\n  const [dataGPX, setDataGPX] = useState([{ latitude: 45.4642, longitude: 9.1900 }]);\n  const [hoverPointIdx, setHoverPointIdx] = useState(undefined);\n\n  useEffect(() => {\n    if (dataGPX.length === 1 && !geolocation.error && geolocation.latitude) {\n      setDataGPX([geolocation]);\n    }\n  }, [geolocation])\n\n  return (\n    <>\n      <img\n        src={img}\n        alt={\"Usage example\"}\n        style={{\n          maxWidth: \"100%\",\n          width: 600,\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\"\n        }}\n      />\n      <GeolocationStats geolocation={geolocation} />\n      <UploadFile setData={setDataGPX} />\n      <MapBox data={dataGPX} hoverPointIdx={hoverPointIdx} />\n      {dataGPX && dataGPX.length > 1 && <SuspenseDataPlot data={dataGPX} setHoverPointIdx={setHoverPointIdx} />}\n    </>\n  );\n}\n\nexport default Maps;\n","const sma = (array, window) => {\n    let res = [];\n    for (let i = 0; i < array.length - window; ++i) {\n        res.push(array.slice(i, i + window).reduce((x, y) => x + y) / window);\n    }\n    return res;\n}\n\nconst range = (start, end, step = 1) => {\n    let res = [];\n    if (start < end) {\n        for (let i = start; i < end; i += step) res.push(i);\n    } else {\n        for (let i = start; i > end; i += step) res.push(i);\n    }\n    return res;\n}\n\nconst sum = a => a.reduce((x, y) => x + y, 0);\nconst dot = (a, b) => {\n    let res = 0;\n    for (let i = 0; i < a.length; ++i)\n        res += a[i] * b[i];\n    return res;\n}\n\n// returns array.length values, kernel.length should be 2*array.length - 1\nconst convolution = (array, kernel) => {\n    const kn = kernel.length;\n    const an = array.length;\n    const halfk = Math.trunc(kn / 2);\n    let res = [];\n    for (let i = 0; i < an; ++i) {\n        const kwindow = kernel.slice(halfk - i, halfk - i + an);\n        res.push(dot(kwindow, array) / sum(kwindow));\n    }\n    return res;\n}\n\nconst wmaKernel = (n, window) => {\n    const kernel = [\n        ...Array(n - window + 1).fill(0),\n        ...range(1, window),\n        ...range(window, 0, -1),\n        ...Array(n - window + 1).fill(0)\n    ]; // [0..0,1..window..1,0..0]\n    return kernel;\n}\n\nconst emaKernel = (n, decay) => {\n    const kernel = [\n        ...range(n, 0, -1).map(x => decay ** x),\n        ...range(0, n + 1).map(x => decay ** x),\n    ];\n    return kernel;\n}\n\nexport { sma, emaKernel, wmaKernel, convolution };"],"names":["props","map","useMap","useEffect","control","L","addTo","_control$getContainer","_control$getContainer2","_step","elementsToRemove","getContainer","getElementsByClassName","_iterator","_createForOfIteratorHelper","s","n","done","value","remove","err","e","f","MAP_TILES","attribution","url","name","maxNativeZoom","MAP_OVERLAYS","DataOverlay","_ref","data","accuracy","length","_jsxs","_Fragment","children","_jsx","CircleMarker","center","latitude","longitude","radius","fill","opacity","fillOpacity","Circle","Polyline","positions","x","ChangeViewOnCenterChange","_ref2","old_center","getCenter","diff","lat","lng","setView","getZoom","_ref3","hoverPointIdx","reduce","a","b","meanPosition","MapContainer","zoom","style","height","width","color","FullscreenControl","LayersControl","position","m","i","checked","TileLayer","deg2rad","deg","dist2d","R","r1","r2","r1cos","Math","cos","r2sin","sin","num","pow","den","sqrt","earthRadius","latRad","dLat","dLon","lonRad","r","atan2","getElemContent","elemHTML","tag","getElementsByTagName","innerHTML","parseXml","xml","prevPt","Array","from","date","Date","parsed","Object","fromEntries","parseFloat","lat_lon","getAttribute","pt","_objectSpread","hAccuracy","hAcc","vAccuracy","vAcc","timestamp","getTime","activeTime","_dist3d","planar","abs","ele","dist","steep","dist3d","distance","steepness","isFinite","distVi","speed3d","speed","setData","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","Button","variant","endIcon","UploadFileOutlined","component","alignItems","display","marginBottom","disabled","onChange","file","target","files","item","text","then","DOMParser","parseFromString","FIELDS","kernel_w","wmaKernel","smoothElem","concat","convolution","fminmax","field","min","apply","_toConsumableArray","o","max","normData","_loop","normElem","push","entries","forEach","keyval","type","accept","hidden","Box","sx","LinearProgress","size","DataPlot","lazy","GeolocationStats","_geolocation$latitude","_geolocation$longitud","_geolocation$altitude","_geolocation$altitude2","_geolocation$heading","_geolocation$speed","geolocation","error","columns","toFixed","round","altitude","altitudeAccuracy","heading","SuspenseDataPlot","wrapWithLoading","useGeolocation","enableHighAccuracy","dataGPX","setDataGPX","_useState3","undefined","_useState4","setHoverPointIdx","src","img","alt","maxWidth","marginLeft","marginRight","UploadFile","MapBox","range","start","end","step","arguments","res","dot","array","kernel","kn","an","halfk","trunc","kwindow","slice","y","window","emaKernel","decay"],"sourceRoot":""}