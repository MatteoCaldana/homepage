{"version":3,"file":"static/js/952.2043b1cc.chunk.js","mappings":"+KA8FA,UA3FiB,SAAHA,GAAoC,IAA9BC,EAAID,EAAJC,KAAMC,EAAgBF,EAAhBE,iBACxBC,GAA4BC,EAAAA,EAAAA,UAAS,QAAOC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAClBI,EAAQC,MAAM,GAAGC,KAAKV,EAAKW,KAAI,SAAAC,GAAC,OAAIA,EAAEC,IAAI,KAC1CC,EAAYL,MAAM,GAAGC,KAAKV,EAAKW,KAAI,SAAAC,GAAC,OAAIA,EAAEG,QAAQ,KACxD,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHjB,MAAIkB,EAAAA,EAAAA,GACC,CAAC,MAAO,YAAa,SAASP,KAAI,SAACQ,EAAOC,GAAC,MAAM,CAClDR,EAAGZ,EAAKW,KAAI,SAAAC,GAAC,OAAIA,EAAEN,EAAO,IAC1Be,EAAGrB,EAAKW,KAAI,SAAAC,GAAC,OAAIA,EAAEO,EAAM,IACzBG,KAAM,OACNC,KAAM,QACNC,UAAW,MACXC,KAAMN,EACNO,MAAON,EAAI,EAAC,IAAAO,OAAOP,EAAI,QAAMQ,EAC9B,KAEHC,OAAQ,CACNC,OAAQ,CAAEC,EAAG,GAAIC,EAAG,IAAKC,EAAG,GAAIC,EAAG,IACnCC,OAAQ,IACRC,OAAQ,CACNxB,EAAG,IACHyB,QAAS,QACThB,EAAG,GAELiB,UAAW,IACXC,MAAO,CACLC,YAAY,EACZC,UAAW,gBACXC,WAAY,QACZC,eAAgB,GAIlBC,WAAY,OACZlB,MAAO,CACLmB,MAAO,GACPC,UAAW,CAAEC,MAAO,WACpBC,SAAU,CAAED,MAAO,YAErBE,OAAQ,CACNJ,MAAO,GACPC,UAAW,CAAEC,MAAO,WACpBC,SAAU,CAAED,MAAO,WACnBG,WAAY,IACZC,KAAM,OACNC,SAAU,MAEZC,OAAQ,CACNR,MAAO,GACPC,UAAW,CAAEC,MAAO,WACpBC,SAAU,CAAED,MAAO,WACnBG,WAAY,IACZC,KAAM,SAERG,YAAa,CACX,CACEC,QAAS,CACP,CACEC,KAAM,CAAC,CAAE5C,EAAGJ,IACZiD,MAAO,OACPC,OAAQ,SACRjC,KAAM,QAER,CACE+B,KAAM,CAAC,CAAE5C,EAAGE,IACZ2C,MAAO,QACPC,OAAQ,SACRjC,KAAM,aAGVkC,UAAW,OACXC,IAAK,CAAE,EAAK,EAAG,EAAK,GACpBC,YAAY,EACZvC,KAAM,UACNV,EAAG,EACHyB,QAAS,OACThB,EAAG,KACHyC,QAAS,SAIfC,OAAQ,CAAEC,gBAAgB,GAC1BC,QAAS,SAAAC,GAAC,OAAIjE,EAAiBiE,EAAEC,OAAO,GAAGC,WAAW,EACtDC,UAAW,kBAAMpE,OAAiB2B,EAAU,EAC5C0C,gBAAiB,SAAAJ,GAAC,OAAI3D,EAAU2D,EAAEK,OAAO9C,KAAK,EAC9C+C,MAAO,CAAEC,MAAO,SAGtB,C","sources":["App/pages/Projects/projects/Maps/DataPlot.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nconst DataPlot = ({ data, setHoverPointIdx }) => {\n  const [xField, setXField] = useState('date');\n  const xDate = Array(3).fill(data.map(x => x.date));\n  const xDistance = Array(3).fill(data.map(x => x.distance));\n  return (\n    <Plot\n      data={[\n        ...['ele', 'steepness', 'speed'].map((field, i) => ({\n          x: data.map(x => x[xField]),\n          y: data.map(x => x[field]),\n          type: 'plot',\n          mode: 'lines',\n          hoverinfo: \"x+y\",\n          name: field,\n          yaxis: i > 0 ? `y${i + 1}` : undefined,\n        })),\n      ]}\n      layout={{\n        margin: { l: 60, r: 150, t: 20, b: 40 },\n        height: 350,\n        legend: {\n          x: 1.2,\n          xanchor: 'right',\n          y: 1\n        },\n        hovermode: \"x\",\n        xaxis: {\n          showspikes: true,\n          spikemode: 'across+toaxis',\n          spikecolor: 'black',\n          spikethickness: 2\n        },\n        // https://github.com/plotly/react-plotly.js/issues/147\n        // https://plotly.com/javascript/uirevision/\n        uirevision: 'true',\n        yaxis: {\n          title: '',\n          titlefont: { color: '#1f77b4' },\n          tickfont: { color: '#1f77b4' },\n        },\n        yaxis2: {\n          title: '',\n          titlefont: { color: '#ff7f0e' },\n          tickfont: { color: '#ff7f0e' },\n          overlaying: 'y',\n          side: 'left',\n          position: 0.005\n        },\n        yaxis3: {\n          title: '',\n          titlefont: { color: '#2ca02c' },\n          tickfont: { color: '#2ca02c' },\n          overlaying: 'y',\n          side: 'right',\n        },\n        updatemenus: [\n          {\n            buttons: [\n              {\n                args: [{ x: xDate }],\n                label: 'Time',\n                method: 'update',\n                name: 'date'\n              },\n              {\n                args: [{ x: xDistance }],\n                label: 'Space',\n                method: 'update',\n                name: 'distance'\n              }\n            ],\n            direction: 'left',\n            pad: { 'r': 0, 't': 0 },\n            showactive: false,\n            type: 'buttons',\n            x: 0.0,\n            xanchor: 'left',\n            y: 1.15,\n            yanchor: 'top'\n          }\n        ]\n      }}\n      config={{ displayModeBar: false }}\n      onHover={e => setHoverPointIdx(e.points[0].pointIndex)}\n      onUnhover={() => setHoverPointIdx(undefined)}\n      onButtonClicked={e => setXField(e.button.name)}\n      style={{ width: \"100%\" }}\n    />\n  );\n}\n\nexport default DataPlot;"],"names":["_ref","data","setHoverPointIdx","_useState","useState","_useState2","_slicedToArray","xField","setXField","xDate","Array","fill","map","x","date","xDistance","distance","_jsx","Plot","_toConsumableArray","field","i","y","type","mode","hoverinfo","name","yaxis","concat","undefined","layout","margin","l","r","t","b","height","legend","xanchor","hovermode","xaxis","showspikes","spikemode","spikecolor","spikethickness","uirevision","title","titlefont","color","tickfont","yaxis2","overlaying","side","position","yaxis3","updatemenus","buttons","args","label","method","direction","pad","showactive","yanchor","config","displayModeBar","onHover","e","points","pointIndex","onUnhover","onButtonClicked","button","style","width"],"sourceRoot":""}