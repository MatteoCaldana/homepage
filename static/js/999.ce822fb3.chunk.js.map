{"version":3,"file":"static/js/999.ce822fb3.chunk.js","mappings":"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","sources":["App/pages/Projects/projects/WaText/engine/settings.js","App/pages/Projects/projects/WaText/engine/watext.js","App/pages/Projects/projects/WaText/components/generic/ListForm.jsx","App/pages/Projects/projects/WaText/components/LoadAndSettings.jsx","App/pages/Projects/projects/WaText/components/SpecifyContacts.jsx","App/pages/Projects/projects/WaText/components/HowToGetChatFile.jsx","App/pages/Projects/projects/WaText/index.jsx"],"sourcesContent":["const settingsIphoneEng = {\n    dateRegex: \"\\\\[(?<d>\\\\d+)/(?<m>\\\\d+)/(?<y>\\\\d+), (?<H>\\\\d+):(?<M>\\\\d+):(?<S>\\\\d+)\\\\] \",\n    contactToMessage: \": \",\n    specialCharacter: \"‎\",\n    mediaPrecursor: \"‎\",\n    deletedMessageRegex: \"‎This message was deleted.$\",\n    // media types name in local language\n    mediaTypes: [\n        \"image\",\n        \"audio\",\n        \"video\",\n        \"document\",\n        \"GIF\",\n        \"sticker\",\n        \"contact\",\n        \"Location\"\n    ],\n};\n\nconst settingsIphoneIta = {\n    dateRegex: \"\\\\[(?<d>\\\\d+)/(?<m>\\\\d+)/(?<y>\\\\d+), (?<H>\\\\d+):(?<M>\\\\d+):(?<S>\\\\d+)\\\\] \",\n    contactToMessage: \": \",\n    specialCharacter: \"‎\",\n    mediaPrecursor: \"‎\",\n    deletedMessageRegex: \"‎((Hai eliminato questo messaggio)|(Questo messaggio è stato eliminato)).\",\n    // media types name in local language\n    mediaTypes: [\n        \"immagine\",\n        \"audio\",\n        \"video\",\n        \"documento\",\n        \"GIF\",\n        \"sticker\",\n        \"contatto\",\n        \"Posizione\"\n    ],\n};\n\nexport { settingsIphoneEng, settingsIphoneIta };","// -----------------------------------------------------------------------------\n// manipulation of the raw text file to the dataframe phase\n// -----------------------------------------------------------------------------\n\nconst extractContactsHeuristic = (fileText, settings) => {\n  const lines = fileText.split('\\n');\n  const regex = new RegExp(`^${settings.dateRegex}(?<sender>(.*?))${settings.contactToMessage}`);\n  let contacts = new Set();\n  lines.forEach(l => {\n    const match = regex.exec(l);\n    if (match) contacts.add(match.groups.sender);\n  });\n  return [...contacts];\n}\n\n// NOTE: a contact cannot be the empty string\nconst parseMessageFactory = (settings, contacts) => {\n  const contactsPseudoRegex = `(?<sender>${contacts.join('|')})${settings.contactToMessage}`;\n  const mediaPseudoRegex = `(.*)${settings.mediaPrecursor}(?<message>.*)`;\n\n  //[15/10/21, 16:06:02] Matteo: \n  const plainRegex = new RegExp(`^${settings.dateRegex}${contactsPseudoRegex}(?<message>.*)`);\n  //‎[12/11/21, 17:53:41] Matteo: \n  const mediaRegex = new RegExp(`^${settings.mediaPrecursor}${settings.dateRegex}${contactsPseudoRegex}${mediaPseudoRegex}`);\n  //[12/11/21, 10:30:23] Matteo: ‎This message was deleted.\n  const deletedRegex = new RegExp(`^${settings.dateRegex}${contactsPseudoRegex}${settings.deletedMessageRegex}`);\n  //[16/09/18, 23:00:34] ‎You created this group\n  const otherSpecialRegex = new RegExp(`^${settings.dateRegex}${settings.specialCharacter}{1,2}(?<message>(.*))`);\n\n  const parseMessage = (line) => { // ------------------------------------------\n    const match = deletedRegex.exec(line);\n    if (match) {\n      return { type: \"deleted\", message: \"\", sender: match.groups.sender, senderId: contacts.indexOf(match.groups.sender) };\n    } else { // ----------------------------------------------------------------\n      const match = plainRegex.exec(line);\n      if (match) {\n        return { type: \"plainText\", message: match.groups.message, sender: match.groups.sender, senderId: contacts.indexOf(match.groups.sender) };\n      } else { // --------------------------------------------------------------\n        const match = mediaRegex.exec(line);\n        if (match) {\n          const message = match.groups.message;\n          let mediaType = \"\";\n          settings.mediaTypes.forEach(e => { if (message.includes(e)) mediaType += \":\" + e; });\n          return { type: \"media\" + mediaType, message, sender: match.groups.sender, senderId: contacts.indexOf(match.groups.sender) };\n        } else { // ------------------------------------------------------------\n          const match = otherSpecialRegex.exec(line);\n          if (match) {\n            return { type: \"info\", message: match.groups.message, sender: \"\", senderId: -1 };\n          }\n        } // -------------------------------------------------------------------\n      }\n    }\n\n    //console.debug(\"Unparsable line:\", line);\n    //if((new RegExp(settings.dateRegex).exec(line))) {\n    //  console.log(\"Unparsable line:\", line);\n    //}\n    return { type: \"\" };\n  }\n\n  return parseMessage;\n}\n\nconst separateMessages = (fileText, settings, contacts) => {\n  const parseMessage = parseMessageFactory(settings, contacts);\n  const lines = fileText.split('\\n');\n  let messages = [];\n  for (let i = 0; i < lines.length; ++i) {\n    const message = parseMessage(lines[i]);\n    if (message.type) {\n      // if the timestamp is older than 1 minute wrt last message we consider\n      // it to be a quote of an older message in a newline, thus it is part\n      // of the previous message\n      const timestamp = extractTimestamp(lines[i], settings);\n      if (messages.length && messages[messages.length - 1].timestamp - timestamp > 60) {\n        messages[messages.length - 1].rawText += lines[i];\n      }\n      messages.push({ rawText: lines[i], timestamp, ...message });\n    } else if (messages.length > 0) {\n      messages[messages.length - 1].rawText += lines[i];\n    } else {\n      console.log(\"Error: Line does not match start and does not have any message before!\", lines[i]);\n    }\n  }\n  messages.sort((a, b) => a.timestamp - b.timestamp);\n  return messages;\n}\n\nconst extractTimestamp = (line, settings) => {\n  const regexDate = new RegExp(settings.dateRegex);\n  const match = regexDate.exec(line);\n  const get = (field) => match.groups[field] ? parseInt(match.groups[field]) : null\n  return new Date(get('y') < 100 ? get('y') + 2000 : get('y'), get('m') - 1, get('d'), get('H'), get('M'), get('S'));\n}\n\nexport { separateMessages, extractContactsHeuristic };","import React, { useState } from \"react\";\n\nimport { IconButton, List, ListItem, TextField } from \"@mui/material\";\n\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst ListForm = ({ name, state, setState, maxLen = 30 }) => {\n  const [collapsed, setCollapsed] = useState(true);\n  if (collapsed) {\n    return (\n      <List dense style={{ padding: 0 }}>\n        <ListItem style={{ padding: 0 }}>\n          <IconButton onClick={() => setCollapsed(false)} size=\"small\">\n            <ArrowRightIcon />\n          </IconButton>\n          <b>{name}:&nbsp;</b>\n          <span style={{ fontSize: 13 }}>\n            {state.join(',').slice(0, maxLen)}{state.join(', ').length > maxLen ? '...' : ''}\n          </span>\n        </ListItem>\n      </List>\n    );\n  } else {\n    return (\n      <List dense style={{ padding: 0 }}>\n        <ListItem style={{ padding: 0 }}>\n          <IconButton onClick={() => setCollapsed(true)} size=\"small\">\n            <ArrowDropDownIcon />\n          </IconButton>\n          <b>{name}:</b>\n        </ListItem>\n        {state.map((x, i) => (\n          <ListItem style={{ marginLeft: 20 }}>\n            <TextField size=\"small\" variant=\"standard\" value={x}\n              onChange={e => setState(s => s.map((_, j) => j === i ? e.target.value : _))}\n            />\n            <IconButton onClick={() => setState(s => s.filter((_, j) => j !== i))} size=\"small\">\n              <DeleteIcon />\n            </IconButton>\n          </ListItem>\n        ))}\n        <ListItem>\n          <IconButton onClick={() => setState(s => [...s, \"\"])} size=\"small\">\n            <AddIcon />\n          </IconButton>\n        </ListItem>\n      </List>\n    );\n  }\n}\n\nexport default ListForm;","import React from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\nimport { Button, CircularProgress, Grid, IconButton, List, ListItem, TextField, Tooltip } from \"@mui/material\";\n\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport HelpIcon from '@mui/icons-material/Help';\n\nimport ListForm from \"./generic/ListForm\";\n\nconst SettingsTextField = ({ settings, setSettings, field }) =>\n  <TextField size=\"small\" variant=\"standard\" color=\"secondary\"\n    label={field}\n    value={settings[field]}\n    onChange={e => setSettings(s => ({ ...s, [field]: e.target.value }))}\n    fullWidth\n  />\n\nconst LoadAndSettings = ({ theme, settings, setSettings, loading, setLoading, rawFile, setRawFile, rawText }) =>\n  <Grid container>\n    <Grid item style={{ minWidth: '50%' }}>\n      <Typography variant=\"h6\">\n        Load the file\n      </Typography>\n      <Grid container alignItems=\"center\">\n        <Button component=\"label\" color=\"secondary\" startIcon={<FileUploadIcon />}>\n          Upload File\n          <input\n            onChange={e => { setLoading(true); setRawFile(e.target.files.item(0)); }}\n            type=\"file\" accept='.txt' hidden\n          />\n        </Button>\n        {\n          loading ?\n            <CircularProgress color=\"secondary\" disableShrink />\n            : (\n              rawFile ?\n                <React.Fragment>\n                  {rawFile.name}\n                  <br />\n                  <textarea\n                    readOnly\n                    value={rawText}\n                    style={{\n                      resize: 'vertical',\n                      minWidth: '95%', minHeight: 300,\n                      backgroundColor: theme.palette.primary.main,\n                      color: theme.palette.primary.contrastText\n                    }}\n                  />\n                </React.Fragment>\n                :\n                null)\n        }\n      </Grid>\n    </Grid>\n    <Grid item style={{ minWidth: '50%' }}>\n      <Grid container>\n        <Typography variant=\"h6\">\n          Settings\n        </Typography>\n        <Tooltip title={\n          <ul>\n            <li>dateRegex: regex of the timestamp, need symbolic groups</li>\n            <li>contactToMessage: separator between contact name and message</li>\n            <li> specialCharacter: character present in special info messages without a sender (for iPhone is U200E) </li>\n            <li> mediaPrecursor: character present at the start of messages containing media (for iPhone is U200E)</li>\n            <li> mediaTypes: list of possible medias in your local language</li>\n            <li> specialActions: list of regex matching special info actions, may add the only special action ['(.*)'] to accept anything that has a special character precursor</li>\n          </ul>\n        }>\n          <IconButton size=\"small\">\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <List dense>\n        <ListItem>\n          <SettingsTextField settings={settings} setSettings={setSettings} field=\"dateRegex\" />\n        </ListItem>\n        <ListItem>\n          <SettingsTextField settings={settings} setSettings={setSettings} field=\"contactToMessage\" />\n        </ListItem>\n        <ListItem>\n          <SettingsTextField settings={settings} setSettings={setSettings} field=\"specialCharacter\" />\n        </ListItem>\n        <ListItem>\n          <SettingsTextField settings={settings} setSettings={setSettings} field=\"mediaPrecursor\" />\n        </ListItem>\n        <ListItem>\n          <ListForm name=\"Media Type\" state={settings.mediaTypes}\n            setState={x =>\n              setSettings(s => ({ ...s, mediaTypes: typeof (x) === 'function' ? x(s.mediaTypes) : x }))\n            }\n          />\n        </ListItem>\n      </List>\n    </Grid>\n  </Grid>\n\nexport default LoadAndSettings;","import React from \"react\";\n\nimport Divider from '@mui/material/Divider';\nimport Typography from \"@mui/material/Typography\";\nimport { Button, Grid } from \"@mui/material\";\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport ListForm from './generic/ListForm';\n\nconst SpecifyContacts = ({ analyzing, analyze, contacts, setContacts }) =>\n  <React.Fragment>\n    <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n    <Typography variant=\"h6\">\n      Specify Contacts and Go!\n    </Typography>\n    <ListForm name=\"Contacts\" state={contacts} setState={setContacts} maxLen={80} />\n    <Grid container justifyContent=\"center\">\n      <Button variant=\"contained\" color=\"secondary\" onClick={analyze}>\n        Analyze!\n      </Button>\n    </Grid>\n    {\n      analyzing ? <LinearProgress color=\"secondary\" style={{ marginTop: 10, marginBottom: 10 }} /> : null\n    }\n  </React.Fragment>\n\nexport default SpecifyContacts;","import React from \"react\";\n\nimport Divider from '@mui/material/Divider';\nimport Typography from \"@mui/material/Typography\";\n\nimport ColorLink from \"../../../../../../components/ColorLink\";\n\nconst HowToGetChatFile = () =>\n  <React.Fragment>\n    <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n    <Typography variant=\"h6\">\n      How To Get The Chat File\n    </Typography>\n    <ul>\n      <li><ColorLink to=\"https://faq.whatsapp.com/it/android/23756533\">For Android</ColorLink></li>\n      <li><ColorLink to=\"https://faq.whatsapp.com/it/iphone/20888066\" >For iPhone</ColorLink></li>\n    </ul>\n  </React.Fragment>\n\nexport default HowToGetChatFile;","import React, { useEffect, useState, Suspense } from \"react\";\r\n\r\nimport Divider from '@mui/material/Divider';\r\nimport { useTheme, CircularProgress } from \"@mui/material\";\r\nimport Carousel from 'react-material-ui-carousel'\r\n\r\nimport { settingsIphoneIta } from './engine/settings';\r\nimport { extractContactsHeuristic, separateMessages } from './engine/watext';\r\nimport LoadAndSettings from \"./components/LoadAndSettings\";\r\nimport SpecifyContacts from \"./components/SpecifyContacts\";\r\nimport HowToGetChatFile from \"./components/HowToGetChatFile\";\r\n\r\nimport img1 from \"../../../../../assets/projects/watext/step1.png\"\r\nimport img2 from \"../../../../../assets/projects/watext/step2.png\"\r\nimport img3 from \"../../../../../assets/projects/watext/step3.png\"\r\nimport img41 from \"../../../../../assets/projects/watext/step4.1.png\"\r\nimport img42 from \"../../../../../assets/projects/watext/step4.2.png\"\r\nimport img5 from \"../../../../../assets/projects/watext/step5.png\"\r\nimport img6 from \"../../../../../assets/projects/watext/step6.png\"\r\nimport img71 from \"../../../../../assets/projects/watext/step7.1.png\"\r\nimport img72 from \"../../../../../assets/projects/watext/step7.2.png\"\r\n\r\nconst ParsedMessages = React.lazy(() => import('./components/ParsedMessages'));\r\nconst BasicStatistics = React.lazy(() => import('./components/BasicStatistics'));\r\nconst TimeDistribution = React.lazy(() => import('./components/TimeDistribution'));\r\nconst CumulativeStats = React.lazy(() => import('./components/CumulativeStats'));\r\nconst MostUsedWords = React.lazy(() => import('./components/MostUsedWords'));\r\nconst Followups = React.lazy(() => import('./components/Followups'));\r\n\r\nconst imgs = [img1, img2, img3, img41, img42, img5, img6, img71, img72];\r\n\r\n// TODO: put thing in accordions to boost performances? -> lazy load\r\n// TODO: android settigns and italian (2x2 = 4 total)\r\n// TODO: test the unparsable lines /engine/watext\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div>\r\n      <CircularProgress color=\"secondary\" disableShrink /> Loading...\r\n    </div>\r\n  );\r\n}\r\n\r\nconst WaText = () => {\r\n  // spinners\r\n  const [loading, setLoading] = useState(false);\r\n  const [analyzing, setAnalyzing] = useState(false);\r\n  // raw data\r\n  const [rawFile, setRawFile] = useState(null);\r\n  const [rawText, setRawText] = useState(\"\");\r\n  const [settings, setSettings] = useState(settingsIphoneIta);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [textDf, setTextDf] = useState([]);\r\n\r\n  const buildTextDf = async () => {\r\n    setTextDf(\r\n      separateMessages(rawText, settings, contacts.filter(x => x !== \"\"))\r\n        .map((x, i) => ({ ...x, id: i }))\r\n    );\r\n  }\r\n\r\n  const analyze = () => {\r\n    setAnalyzing(true);\r\n    setTextDf([]);\r\n    setTimeout(() => buildTextDf().then(() => setAnalyzing(false)), 200);\r\n  };\r\n\r\n  useEffect(() => {\r\n    rawFile && rawFile.text().then(x => { setRawText(x); setLoading(false); });\r\n  }, [rawFile])\r\n\r\n  useEffect(() => {\r\n    rawText && setContacts(extractContactsHeuristic(rawText, settings));\r\n  }, [rawText, settings])\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Carousel>\r\n        {imgs.map((x, i) => <img src={x} alt={i} key={i} style={{ height: 300, marginLeft: \"auto\", marginRight: \"auto\", display: \"block\" }} />)}\r\n      </Carousel>\r\n      <HowToGetChatFile />\r\n      <Divider style={{ marginTop: 10, marginBottom: 10 }} />\r\n      <LoadAndSettings theme={theme}\r\n        settings={settings} setSettings={setSettings}\r\n        loading={loading} setLoading={setLoading}\r\n        rawFile={rawFile} setRawFile={setRawFile}\r\n        rawText={rawText}\r\n      />\r\n      {\r\n        rawText.length ?\r\n          <SpecifyContacts analyzing={analyzing} analyze={analyze}\r\n            contacts={contacts} setContacts={setContacts}\r\n          />\r\n          :\r\n          null\r\n      }\r\n      {\r\n        textDf.length ?\r\n          <React.Fragment>\r\n            <Suspense fallback={<Loading />}>\r\n              <ParsedMessages textDf={textDf} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loading />}>\r\n              <BasicStatistics textDf={textDf} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loading />}>\r\n              <TimeDistribution textDf={textDf} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loading />}>\r\n              <CumulativeStats textDf={textDf} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loading />}>\r\n              <MostUsedWords textDf={textDf} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loading />}>\r\n              <Followups textDf={textDf} />\r\n            </Suspense>\r\n          </React.Fragment>\r\n          :\r\n          null\r\n      }\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default WaText;"],"names":["settingsIphoneIta","dateRegex","contactToMessage","specialCharacter","mediaPrecursor","deletedMessageRegex","mediaTypes","separateMessages","fileText","settings","contacts","parseMessage","contactsPseudoRegex","concat","join","mediaPseudoRegex","plainRegex","RegExp","mediaRegex","deletedRegex","otherSpecialRegex","line","match","exec","type","message","sender","groups","senderId","indexOf","mediaType","forEach","e","includes","parseMessageFactory","lines","split","messages","i","length","timestamp","extractTimestamp","rawText","push","_objectSpread","console","log","sort","a","b","get","field","parseInt","Date","_ref","name","state","setState","_ref$maxLen","maxLen","_useState","useState","_useState2","_slicedToArray","collapsed","setCollapsed","_jsx","List","dense","style","padding","children","_jsxs","ListItem","IconButton","onClick","size","ArrowRightIcon","fontSize","slice","ArrowDropDownIcon","map","x","marginLeft","TextField","variant","value","onChange","s","_","j","target","filter","DeleteIcon","_toConsumableArray","AddIcon","SettingsTextField","setSettings","color","label","_defineProperty","fullWidth","_ref2","theme","loading","setLoading","rawFile","setRawFile","Grid","container","item","minWidth","Typography","alignItems","Button","component","startIcon","FileUploadIcon","files","accept","hidden","CircularProgress","disableShrink","React","readOnly","resize","minHeight","backgroundColor","palette","primary","main","contrastText","Tooltip","title","HelpIcon","ListForm","analyzing","analyze","setContacts","Divider","marginTop","marginBottom","justifyContent","LinearProgress","ColorLink","to","ParsedMessages","BasicStatistics","TimeDistribution","CumulativeStats","MostUsedWords","Followups","imgs","img1","img2","img3","img41","img42","img5","img6","img71","img72","Loading","_useState3","_useState4","setAnalyzing","_useState5","_useState6","_useState7","_useState8","setRawText","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","textDf","setTextDf","buildTextDf","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","id","stop","apply","arguments","useEffect","text","then","regex","Set","l","add","extractContactsHeuristic","useTheme","Carousel","src","alt","height","marginRight","display","HowToGetChatFile","LoadAndSettings","SpecifyContacts","setTimeout","Suspense","fallback"],"sourceRoot":""}